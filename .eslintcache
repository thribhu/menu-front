[{"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/index.js":"1","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/saga.js":"2","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/index.js":"3","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/service.js":"4","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/index.js":"5","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/addGroup.js":"6","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/constants.js":"7","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/utils.js":"8","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/actions.js":"9","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/reducer.js":"10","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/index.js":"11","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/actions.js":"12","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/constants.js":"13","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/saga.js":"14","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/addModifier.js":"15","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/table/index.js":"16","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/index.js":"17","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/sidebarRoutes.js":"18","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/routes.js":"19","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reportWebVitals.js":"20","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reducers.js":"21","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/saga.js":"22","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/saga.js":"23","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/service.js":"24","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/constants.js":"25","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/utils/normalize.js":"26","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/addItem.js":"27","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/selector.js":"28","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/orderTable/index.js":"29","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/index.js":"30","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/App.js":"31","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/sagas.js":"32","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/service.js":"33","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/selector.js":"34","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/reducer.js":"35","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/reducer.js":"36","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/selector.js":"37","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/selectors.js":"38","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/addOption.js":"39"},{"size":501,"mtime":1617371187943,"results":"40","hashOfConfig":"41"},{"size":3607,"mtime":1617520448063,"results":"42","hashOfConfig":"41"},{"size":6079,"mtime":1617521524665,"results":"43","hashOfConfig":"41"},{"size":897,"mtime":1617371188023,"results":"44","hashOfConfig":"41"},{"size":4870,"mtime":1617521390154,"results":"45","hashOfConfig":"41"},{"size":13314,"mtime":1617371188067,"results":"46","hashOfConfig":"41"},{"size":1463,"mtime":1617371188011,"results":"47","hashOfConfig":"41"},{"size":335,"mtime":1617371188103,"results":"48","hashOfConfig":"41"},{"size":817,"mtime":1617371187963,"results":"49","hashOfConfig":"41"},{"size":2769,"mtime":1617494937575,"results":"50","hashOfConfig":"41"},{"size":5282,"mtime":1617495163069,"results":"51","hashOfConfig":"41"},{"size":878,"mtime":1617371208896,"results":"52","hashOfConfig":"41"},{"size":1194,"mtime":1617371226520,"results":"53","hashOfConfig":"41"},{"size":3876,"mtime":1617371283690,"results":"54","hashOfConfig":"41"},{"size":10135,"mtime":1617372063099,"results":"55","hashOfConfig":"41"},{"size":8176,"mtime":1617371976648,"results":"56","hashOfConfig":"41"},{"size":1184,"mtime":1617373145952,"results":"57","hashOfConfig":"41"},{"size":1636,"mtime":1617373113095,"results":"58","hashOfConfig":"41"},{"size":1957,"mtime":1617434294615,"results":"59","hashOfConfig":"41"},{"size":362,"mtime":1613558109347,"results":"60","hashOfConfig":"41"},{"size":422,"mtime":1616526875451,"results":"61","hashOfConfig":"41"},{"size":3571,"mtime":1617371188063,"results":"62","hashOfConfig":"41"},{"size":3556,"mtime":1617371187991,"results":"63","hashOfConfig":"41"},{"size":821,"mtime":1616526875447,"results":"64","hashOfConfig":"41"},{"size":1562,"mtime":1616526875447,"results":"65","hashOfConfig":"41"},{"size":136,"mtime":1613558109347,"results":"66","hashOfConfig":"41"},{"size":14958,"mtime":1617371188103,"results":"67","hashOfConfig":"41"},{"size":1012,"mtime":1617371188007,"results":"68","hashOfConfig":"41"},{"size":4596,"mtime":1613727067867,"results":"69","hashOfConfig":"41"},{"size":3943,"mtime":1617548806886,"results":"70","hashOfConfig":"41"},{"size":976,"mtime":1617371187931,"results":"71","hashOfConfig":"41"},{"size":334,"mtime":1616526875451,"results":"72","hashOfConfig":"41"},{"size":846,"mtime":1616526875451,"results":"73","hashOfConfig":"41"},{"size":1254,"mtime":1617371188011,"results":"74","hashOfConfig":"41"},{"size":2775,"mtime":1617520224082,"results":"75","hashOfConfig":"41"},{"size":2434,"mtime":1617531714733,"results":"76","hashOfConfig":"41"},{"size":1497,"mtime":1617490945074,"results":"77","hashOfConfig":"41"},{"size":1011,"mtime":1617494684933,"results":"78","hashOfConfig":"41"},{"size":11430,"mtime":1617520062231,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ds2j73",{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"85"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"85"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"91"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"85"},"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/index.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/saga.js",["171"],"import { takeEvery, put, call } from \"redux-saga/effects\";\nimport * as Actions from \"./constants\";\nimport {\n  listitems,\n  addItems,\n  updateItem,\n  deleteItem,\n  detailItems,\n  listOptionGroupSerive,\n} from \"./service\";\nimport { isEmpty } from \"lodash\";\nfunction* listItemsSaga() {\n  try {\n    const response = yield call(listitems);\n    const { status, data } = response;\n    if (status === 200) {\n        yield put({\n          type: Actions.LIST_ITEMS_SUCCESS,\n          payload: data,\n        });\n    } else throw new Error(\"Unable to fetch modifiers\");\n  } catch (err) {\n    console.log(err);\n    yield {\n      type: Actions.LIST_ITEMS_ERROR,\n      error: err.message,\n    };\n  }\n}\n\nfunction* addItemsSaga({ payload }) {\n  try {\n    const addReq = yield call(addItems, payload);\n    if (addReq.status === 201) {\n      yield put({\n        type: Actions.ADD_ITEM_SUCCESS,\n        payload: addReq.data,\n      });\n      yield put({\n        type: Actions.LIST_ITEMS,\n      });\n    }\n    else throw new Error(\"Unable to add items\");\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: Actions.ADD_ITEM_ERROR,\n      error: err.message,\n    });\n  }\n}\n\nfunction* updateItemsSaga({ payload }) {\n  try {\n    const updateReq = yield call(updateItem, payload);\n    const { status } = updateReq;\n    if (status === 201) {\n      alert('Item update success')\n      yield put({\n        type: Actions.UPDATE_ITEM_ERROR,\n        payload: \"success\",\n      });\n      yield put({\n        type: Actions.LIST_ITEMS,\n      });\n    }\n    else throw new Error(\"Unable to update items\");\n  } catch (err) {\n    alert('Item update failed')\n    console.log(err);\n    yield put({\n      type: Actions.UPDATE_ITEM_ERROR,\n      error: err.message,\n    });\n  }\n}\n/**\n *\n * @param {item} items\n * Usually we dont user this function\n * as fetching a single item or option with id is not practical\n */\nfunction* detailItemsSaga({ payload }) {\n  try {\n    const req = yield call(detailItems, payload.id);\n    const { status, data } = req;\n    if (status === 200) {\n      yield put({\n        type: Actions.DETAIL_ITEM_SUCCESS,\n        payload: data,\n      });\n    }\n    else throw new Error(\"Unable to fetch items\");\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: Actions.DETAIL_ITEM_ERROR,\n      error: err.message,\n    });\n  }\n}\n\nfunction* deleteItemsSaga({ payload }) {\n  try {\n    const req = yield call(deleteItem, payload);\n    const { status } = req;\n    if (status === 204) {\n      yield put({\n        type: Actions.DELETE_ITEM_SUCCESS,\n      });\n      yield put({\n        type: Actions.LIST_ITEMS,\n      });\n    }\n  } catch (err) {\n    console.log(err);\n      yield put({\n        type: Actions.LIST_ITEMS,\n      });\n    yield put({\n      type: Actions.DELETE_ITEM_SUCCESS,\n      error: err.message,\n    });\n  }\n}\n\nfunction* listOptionGroupsSaga(){\n  try {\n    const req = yield call(listOptionGroupSerive)\n    const {status, data} = req\n    if(200 === status) {\n      yield put({\n        type: Actions.LIST_OPTIONS_GROUPS_SUCCESS,\n        payload: data.data\n      })\n    }\n  }\n  catch (err) {\n    console.error(err)\n    yield put({\n      type: Actions.LIST_OPTIONS_GROUPS_ERROR,\n      error: err\n    })\n  }\n}\n\nexport default function* optionSaga() {\n  yield takeEvery(Actions.ADD_ITEM, addItemsSaga);\n  yield takeEvery(Actions.LIST_ITEMS, listItemsSaga);\n  yield takeEvery(Actions.UPDATE_ITEM, updateItemsSaga);\n  yield takeEvery(Actions.DETAIL_ITEM, detailItemsSaga);\n  yield takeEvery(Actions.DELETE_ITEM, deleteItemsSaga);\n  yield takeEvery(Actions.LIST_OPTIONS_GROUPS, listOptionGroupsSaga)\n}\n",["172","173"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/index.js",["174","175","176","177","178","179","180"],"import React from \"react\";\nimport classname from \"classnames\";\nimport styles from \"./Groups.module.sass\";\nimport Modal from \"react-modal\";\nimport Table from \"components/table\";\nimport AddGroup from \"views/Groups/addGroup\";\nimport  { isEmpty, map, assign } from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport { FaTrash, FaEdit, FaWindowClose } from \"react-icons/fa\";\nimport { normalizeText } from \"utils/normalize\";\nimport {listGroup, removeGroup, selectGroup} from 'modules/groups/actions'\nimport { loadingSelector, errorSelector, listSelector, messageSelector } from 'modules/groups/selector'\nimport {listOptions} from 'modules/options/actions'\nimport {loadingSelector as optionLoading, optionsSelector, errorSelector as optionError, messageSelector as optionsInfo} from 'modules/options/selector'\nimport {useDispatch, useSelector} from 'react-redux'\nconst groupColumns = [\n  {\n    Header: \"Group\",\n    accessor: d => normalizeText(d.name) || \"-\",\n    width: 50,\n  },\n  {\n    Header: \"Display Order\",\n    accessor: d => d.order || \"-\",\n  },\n  {\n    Header: \"Price\",\n    accessor: d => d.price || 0,\n  },\n  {\n    Header: \"Max Allowed\",\n    accessor: d => d.max_allowed || 0,\n  },\n  {\n    Header: \"Min Required\",\n    accessor: d => d.min_required || 0,\n  },\n  {\n    Header: \"Options\",\n    accessor: d => {\n      let names = map(d.options, _ => normalizeText(_.name))\n      return names.join(\", \") || \"-\"\n    }\n  },\n  {\n    Header: \"Actions\",\n    accessor: \"actions\",\n  },\n];\nconst columns = [\n  {\n    Header: \"Image\",\n    accessor: \"image\",\n  },\n  {\n    Header: \"Name\",\n    accessor: \"name\",\n  },\n  {\n    Header: \"Price\",\n    accessor: \"price\",\n  },\n  {\n    Header: \"Type\",\n    accessor: \"type\",\n  },\n];\nexport default function GroupsTable() {\n  const dispatch = useDispatch()\n  const history = useHistory();\n  const groups = useSelector(listSelector)\n  const message = useSelector(messageSelector)\n  const options = useSelector(optionsSelector)\n  const loading = useSelector(loadingSelector)\n  const error = useSelector(errorSelector)\n  const options_loading = useSelector(optionLoading)\n  const option_error = useSelector(optionError)\n  const options_message = useSelector(optionsInfo)\n  const [selected, setSelected] = React.useState([]);\n  const [form, setForm] = React.useState();\n  const [open, setOpen] = React.useState(false);\n  const [step1, setSetp1] = React.useState(false);\n  React.useEffect(() => {\n    if(isEmpty(message) && isEmpty(groups)) {\n      dispatch(listGroup())\n    }\n  }, [dispatch, groups])\n  React.useEffect(() => {\n    if(isEmpty(optionsInfo) && isEmpty(options)) {\n      dispatch(listOptions())\n    }\n  }, [dispatch, groups])\n  const customStyles = {\n    content: {\n      margin: \"auto\",\n      height: \"80%\",\n      width: \"100%\",\n      maxWidth: \"600px\",\n      overflow: \"auto\",\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      bottom: \"auto\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n  const handleEdit = group => {\n    delete group.actions\n    dispatch(selectGroup(group))\n    history.push(\"/addGroup\")\n  }\n  const handleRemove = group => {\n    const confirm = window.confirm(`You are about to remove ${group.name}. This is not reversable`)\n    if(confirm) {\n      dispatch(removeGroup(group.id))\n    }\n  }\n  map(groups, (option, i) =>\n    assign(option, {\n      actions: (\n        <div style={{ display: \"flex\" }} key={i}>\n          <div style={{ padding: \"0 5px\" }}>\n            <button onClick={() => handleEdit(option)}>\n              <FaEdit />\n            </button>\n          </div>\n          <div>\n            <button onClick={() => handleRemove(option)}>\n              <FaTrash />\n            </button>\n          </div>\n        </div>\n      ),\n    })\n  );\n  return (\n    <div className={classname(styles.tableContainer)}>\n      <Modal\n        isOpen={open}\n        onRequestClose={() => {\n          setOpen(false);\n          setSetp1(false);\n        }}\n        style={customStyles}\n      >\n        <div>\n\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <button onClick={() => setOpen(false)} style={{ cursor: 'pointer' }} className={classname(styles.transparent)}>\n                            <FaWindowClose />\n                        </button>\n                    </div>\n        {step1 && (\n          <div>\n            <button onClick={() => setSetp1(false)}>Back</button>\n          </div>\n        )}\n        {!step1 ? (\n          <AddGroup\n            next={setSetp1}\n            formMethod={setForm}\n            currentForm={form}\n            setOpen={setOpen}\n          />\n        ) : (\n          <div>\n            <Table\n              updateSelectItems={setSelected}\n              columns={columns}\n              data={options}\n            />\n            <div className={classname(styles.buttonGroup)}>\n              <div>\n                <button className={classname(styles.ctaButton)}>\n                  New Option\n                </button>\n              </div>\n              <div>\n                <button\n                  className={classname(styles.ctaButton)}\n                  style={{ width: \"150px\" }}\n                  onClick={() =>\n                    history.push(\"/addGroup\", { currentForm: form, selected })\n                  }\n                >\n                  Add options to group\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n        </div>\n      </Modal>\n      <div>\n        <Table\n          updateSelectItems={setSelected}\n          columns={groupColumns}\n          data={groups}\n        />\n        {\n          !isEmpty(message) && \n          <div className=\"UcenterWithMargin IamInfo\">\n           * Add Groups to view in this table \n          </div>\n        }\n      </div>\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", margin: \"20px\" }}\n      >\n        <button\n          onClick={() => setOpen(true)}\n          className={classname(styles.ctaButton)}\n        >\n          Add Group\n        </button>\n      </div>\n    </div>\n  );\n}\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/service.js",[],["181","182"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/index.js",["183","184","185","186","187","188","189","190","191","192"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/addGroup.js",["193","194","195","196","197","198"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/constants.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/utils.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/actions.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/reducer.js",["199","200"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/index.js",["201","202"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/actions.js",[],["203","204"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/constants.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/saga.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/addModifier.js",["205","206"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/table/index.js",["207","208","209","210","211","212","213"],"import React from \"react\";\nimport {\n  useTable,\n  useFilters,\n  useAsyncDebounce,\n  useSortBy,\n  usePagination,\n  useRowSelect,\n  useGlobalFilter,\n} from \"react-table\";\nimport _ from \"lodash\";\nimport classnames from \"classnames\";\nimport { matchSorter } from \"match-sorter\";\nimport styles from \"./table.module.css\";\n\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { map } from \"lodash\";\nconst style = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\nconst newStyles = {\n  formControlMargins: {\n    margin: \"3px 0 !important\",\n  },\n  gridContainer: {\n    justifyContent: \"center\",\n  },\n};\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <div style={{ width: \"100%\", display: \"flex\", justifyContent: \"center\" }}>\n      <input\n        onChange={(e) => {\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search ${count} records...`}\n        className={classnames(styles.rt_header_search)}\n      />\n    </div>\n  );\n}\n// global filter\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return (\n    <div style={{display: 'flex' }}>\n      <div style={{display: 'flex', alignItems:'center'}}>\n        Search\n      </div>\n      <input\n        value={value || \"\"}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        style={{\n          margin: '10px',\n          width: '100%',\n          fontSize: \"1rem\",\n          border: \"solid 1px\",\n          padding: \"10px\",\n        }}\n      />\n    </div>\n  );\n}\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n\n// Our table component\nfunction Table({\n  columns,\n  data,\n  updateSelectItems,\n  withCheckBox,\n  noAction,\n  preSelected,\n  title,\n}) {\n  const memo_columns = React.useMemo(() => {\n    if (noAction) {\n      _.remove(columns, { Header: \"Actions\" });\n      return columns;\n    } else return columns;\n  }, [noAction]);\n  const memo_data = React.useMemo(() => data);\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n  const preSelectIndex = _.map(preSelected, (s) =>\n    _.indexOf(\n      memo_data.map((m) => m.id),\n      s.id\n    )\n  );\n  const selected = {};\n  preSelectIndex.map((i) => (selected[i] = true));\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    pageOptions,\n    state: {selectedRowIds },\n    selectedFlatRows,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns: memo_columns,\n      data: memo_data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n      initialState: { selectedRowIds: selected },\n    },\n    useFilters, // useFilters!\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      if (withCheckBox) {\n        hooks.visibleColumns.push((columns) => [\n          {\n            id: \"selection\",\n            Header: ({ getToggleAllPageRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox\n                  {...getToggleAllPageRowsSelectedProps()}\n                />\n              </div>\n            ),\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ]);\n      } else return null;\n    }\n  );\n\n  React.useEffect(() => {\n    updateSelectItems(\n      map(selectedFlatRows, (d) => {\n        return d.original;\n      })\n    );\n  }, [updateSelectItems, selectedRowIds]);\n  return (\n    <div className={classnames(styles.ReactTable)}>\n      {title && <div className={classnames(styles.tableTile)}>{title}</div>}\n      <div>\n        <GlobalFilter\n          preGlobalFilteredRows={preGlobalFilteredRows}\n          globalFilter={state.globalFilter}\n          setGlobalFilter={setGlobalFilter}\n        />\n      </div>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map((headerGroup) => (\n            <TableRow {...headerGroup.getHeaderGroupProps()} className=\"rt-tr\">\n              {headerGroup.headers.map((column, key) => (\n                <TableCell\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={classnames(\"rt-th rt-resizable-header\", {\n                    \"-cursor-pointer\": headerGroup.headers.length - 1 !== key,\n                    \"_sort-asc\": column.isSorted && !column.isSortedDesc,\n                    \"_sort-desc\": column.isSorted && column.isSortedDesc,\n                  })}\n                >\n                  <div\n                    className=\"rt-resizable-header-content\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    {column.render(\"Header\")}\n                  </div>\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell\n              colSpan={visibleColumns.length}\n              style={{ textAlign: \"left\" }}\n            ></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody\n          // style={{ textAlign: \"center\" }}\n          {...getTableBodyProps()}\n          className=\"rt-tbody\"\n        >\n          {rows.map((row, i) => {\n            prepareRow(row);\n\n            return (\n              <TableRow\n                {...row.getRowProps()}\n                className={classnames(\n                  \"rt-tr\",\n                  { \" -odd\": i % 2 === 0 },\n                  { \" -even\": i % 2 === 1 }\n                )}\n                //   onClick={() => handleClickOpen(row.original)}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <TableCell\n                      {...cell.getCellProps()}\n                      className=\"rt-td\"\n                      style={{ textAlign: \"center\" }}\n                    >\n                      {cell.render(\"Cell\")}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </MaUTable>\n    </div>\n  );\n}\nexport default Table;\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/index.js",["214"],"import React from 'react';\nimport styles from './Sidebar.module.sass';\nimport classname from 'classnames';\nimport default_img from './default.jpg';\nimport { normalizeText } from 'utils/normalize'\nimport SidebarRoutes from './sidebarRoutes'\nexport default function Sidebar(props) {\n    const [activeRoute, setActive] = React.useState('/items')\n    const {\n        title,\n        img\n    } = props;\n    return (\n        <div className={classname(styles.main)}>\n            <div className={classname(styles.sidebar_header)}>\n                <div class={classname(styles.titleBox)}>\n                    <div className={classname(styles.avatar)}>\n                        <img src={img ? img : default_img} className={classname(styles.avatarImg)} />\n                    </div>\n                    <div className={classname(styles.title)}>\n                        <h1>{title ? normalizeText(title) : normalizeText('echola pizza')}</h1>\n                    </div>\n                </div>\n            </div>\n            <div className={classname(styles.sidebar_content)}>\n                <SidebarRoutes activeRoute={activeRoute} setActive={setActive}/>\n            </div>\n        </div>\n    )\n}","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/sidebarRoutes.js",["215","216","217","218","219"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/routes.js",["220"],"import AddOptions from 'views/Options/addOption'\nimport OptionsList from 'views/Options'\nimport Groups from 'views/Groups';\nimport AddGroup from 'views/Groups/addGroup'\nimport ListItems from 'views/Items';\nimport AddItem from 'views/Items/addItem';\nimport Modifiers from 'views/Modifiers'\nimport AddModifier from 'views/Modifiers/addModifier';\nimport { FaObjectGroup, FaSitemap, FaPizzaSlice, FaDiceD6 } from 'react-icons/fa'\nexport default function () {\n    return [\n        {\n            path: \"/options\",\n            name: \"Options\",\n            icon: (<div><FaSitemap/></div>),\n            component: OptionsList,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addOption\",\n            name: \"Add option\",\n            icon: \"\",\n            component: AddOptions,\n            layout: \"/pizza\",\n        },\n        {\n            path: '/modifiers',\n            name: 'Modifiers',\n            icon: (<div><FaDiceD6/></div>),\n            component: Modifiers,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addModifier\",\n            name: \"Add Modifier\",\n            icon: \"\",\n            component: AddModifier,\n            layout: \"/pizza\"\n        },\n        {\n            path: '/items',\n            name: 'Items',\n            icon: (<div><FaPizzaSlice/></div>),\n            component: ListItems,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addItem\",\n            name: \"Add Item\",\n            icon: \"\",\n            component: AddItem,\n            layout: \"/pizza\"\n        }\n        ,{\n            path: '/groups',\n            name: 'Groups',\n            icon: (<div><FaObjectGroup/></div>),\n            component: Groups,\n            layout: \"/pizza\",\n            children: [\n            ]\n        },\n        {\n            path: \"/addgroup\",\n            name: \"add option group\",\n            icon: \"\",\n            component: AddGroup,\n            layout: \"/pizza\"\n        }\n    ]\n}","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reportWebVitals.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reducers.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/saga.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/saga.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/service.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/constants.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/utils/normalize.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/addItem.js",["221","222","223","224","225","226","227","228","229","230","231","232"],"import React from \"react\";\nimport classname from \"classnames\";\nimport styles from \"./Items.module.sass\";\nimport _, { isEmpty, map } from \"lodash\";\nimport { Formik, Form, Field, ErrorMessage, isEmptyArray } from \"formik\";\nimport * as yup from \"yup\";\nimport { normalizeText as normalize } from \"utils/normalize\";\nimport Switch from \"react-switch\";\nimport Table from \"components/table\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { listGroup } from \"modules/groups/actions\";\nimport { listOptions } from \"modules/options/actions\";\nimport { addItem, updateItem, removeSelected, getListOptionGroups } from \"modules/items/actions\";\nimport {splitOptionsAndGroups} from './utils'\nimport {\n  loadingSelector as group_loading,\n  listSelector as groupsSelector,\n  messageSelector,\n} from \"modules/groups/selector\";\nimport {\n  loadingSelector as options_loading,\n  optionsSelector,\n} from \"modules/options/selector\";\nimport { selectedSelector, loadingSelector, optionGroupsSelector } from \"modules/items/selector\";\nimport { FaRegObjectGroup } from \"react-icons/fa\";\nimport OrderTable from \"components/orderTable\";\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  image_url: \"\",\n  price: \"\",\n  type: \"\",\n  stock: \"\",\n};\nconst validationSchema = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  description: yup.string().optional(),\n  price: yup.number().required(\"Price is required\"),\n  type: yup.string().optional(),\n  stock: yup.number().optional(),\n});\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return (\n          <div>\n            {normalize(d.name)}\n            <FaRegObjectGroup style={{ padding: \"0 5px\" }} />\n          </div>\n        );\n      } else {\n        return d.name;\n      }\n    },\n  },\n  {\n    Header: \"Price\",\n    accessor:  \"price\",\n  },\n  {\n    Header: \"Min\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.min_required;\n      } else return \"-\";\n    },\n  },\n  {\n    Header: \"Max\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.max_allowed;\n      } else return \"-\";\n    },\n  },\n];\nconst stichOptionsAndGroups = (list) => {\n  let o = list.options \n  let g = list.option_groups \n  let res = o.concat(g)\n  return res\n}\nexport default function AddItem(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const groups = useSelector(groupsSelector);\n  const options = useSelector(optionsSelector);\n  const nowItem = useSelector(selectedSelector);\n  let option_groups = useSelector(optionGroupsSelector) \n  const loading = useSelector(loadingSelector);\n  const groupLoading = useSelector(group_loading);\n  const optionLoading = useSelector(options_loading);\n  const groupInfo = useSelector(messageSelector);\n  const [active, setActive] = React.useState(true);\n  const [step1, setStep1] = React.useState(false);\n  const [groupsSelected, selectGroups] = React.useState(!isEmpty(nowItem) ? stichOptionsAndGroups(nowItem) : []);\n  const [formValues, setForm] = React.useState();\n  const [groupArray, setGroupArray] = React.useState();\n  const [optionArray, setOptionArray] = React.useState()\n  const [showOrder, setShow] = React.useState(false);\n\n  //let tableData = groups.concat(options)\n  React.useEffect(() => {\n    if(isEmpty(option_groups)) {\n      dispatch(getListOptionGroups())\n    }\n    return () => dispatch(removeSelected())\n  }, [dispatch, option_groups]);\n  const handleSaveItem = () => {\n    // we get all the row props, insted we only want original\n    const {option_groups, options} = splitOptionsAndGroups(map(groupArray, g => g.original))\n    let _active\n    if (active) {\n      _active = 1\n    }\n    else _active = 0\n    const values = formValues;\n    const finalItem = _.assign({}, values, { active: _active, options, option_groups});\n    if (!isEmpty(nowItem)) {\n      dispatch(updateItem(finalItem));\n    } else {\n      dispatch(addItem(finalItem));\n    }\n    setForm(null);\n    setShow(false)\n    if(props.setOpen) {\n      props.setOpen(false)\n    }\n  };\n  return (\n    <div>\n      <div className={classname(styles.container)} style={{ flex: 1 }}>\n        {!step1 && (\n          <div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <p style={{ fontSize: \"1.5rem\", color: \"red\" }}>\n                {!isEmpty(nowItem) ? \"Update Item\" : \"Add Item\"}\n              </p>\n            </div>\n            <Formik\n              initialValues={\n                !isEmpty(nowItem)\n                  ? !isEmpty(formValues)\n                    ? formValues\n                    : nowItem\n                  : _.merge(initialValues, formValues)\n              }\n              validationSchema={validationSchema}\n              onSubmit={async (values) => {\n                setForm(values);\n                setStep1(true);\n                setShow(true)\n              }}\n              enableReinitialize\n            >\n              {({ values }) => (\n                <Form>\n                  <div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"name\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Item\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"name\"\n                          type=\"text\"\n                          className={classname(styles.formInput)}\n                          autoFocus={true}\n                        />\n                        <ErrorMessage\n                          name={\"name\"}\n                          component=\"div\"\n                          style={{ color: \"red\" }}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"price\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Price\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"price\"\n                          type=\"number\"\n                          className={classname(styles.formInput)}\n                          min={0}\n                          step={0.01}\n                        />\n                        <ErrorMessage\n                          name={\"price\"}\n                          component=\"div\"\n                          style={{ color: \"red\" }}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"type\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Type\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"type\"\n                          type=\"text\"\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"stock\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Stock\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"stock\"\n                          type=\"number\"\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"active\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Active\n                        </label>\n                      </div>\n                      <div>\n                        <Field name=\"active\">\n                          {({ field, form, meta }) => (\n                            <Switch\n                              name=\"active\"\n                              {...field}\n                              onChange={(e) => {\n                                setActive(e);\n                              }}\n                              checked={active}\n                            />\n                          )}\n                        </Field>\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div\n                      className={classname(\n                        styles.imageField,\n                        styles.formControl\n                      )}\n                    >\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"modifier_image\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Image\n                        </label>\n                      </div>\n                      <div>\n                        <input\n                          type=\"file\"\n                          name=\"modifier_image\"\n                          max={1}\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.titleWithNoBox)}>\n                      <h4>Description</h4>\n                    </div>\n                    <div className={classname(styles.descriptionBox)}>\n                      <div>\n                        <Field\n                          as=\"textarea\"\n                          name=\"description\"\n                          type=\"text\"\n                          className={classname(styles.descriptionContainer)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"description\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.saveButtonContainer)}>\n                      <button\n                        type=\"submit\"\n                        className={classname(styles.ctaButton)}\n                      >\n                        Choose Options\n                      </button>\n                    </div>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        )}\n        {step1 &&  (\n          <div className={classname(styles.tableContainer)}>\n            <div className={classname(styles.tableFlex)}>\n              <Table\n                title={\"Options and groups\"}\n                columns={columns}\n                data={option_groups}\n                updateSelectItems={selectGroups}\n                withCheckBox={true}\n                noAction={true}\n                preSelected={groupsSelected}\n              />\n            </div>\n            <div className={classname(styles.between)}>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <div style={{ paddingTop: \"5px\" }}>\n                  <button\n                    onClick={() => setStep1(false)}\n                    className={classname(styles.ctaButton)}\n                  >\n                    Back\n                  </button>\n                </div>\n              </div>\n              <div>\n                <button\n                  disabled={!groupsSelected.length}\n                  className={classname(styles.ctaButton)}\n                  onClick={() =>\n                    groupsSelected.length ? setStep1(false) : null\n                  }\n                >\n                  Add to Item\n                </button>\n                <div style={{ fontSize: \"10px\" }}>\n                  {!groupsSelected.length && (\n                    <p>\n                      <span style={{ color: \"red\" }}>*</span> Select alteast 1\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {groupsSelected.length && !step1 && showOrder ? (\n        <div style={{ flex: 1 }}>\n          <div>Option Groups</div>\n          <div>\n            <OrderTable\n              columns={columns}\n              data={groupsSelected}\n              updateCurrentRows={setGroupArray}\n            />\n          </div>\n          <div\n            style={{\n              margin: \"10px auto\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <button\n              className={styles.ctaButton}\n              onClick={() => {\n                handleSaveItem();\n              }}\n            >\n              Save Item\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/groups/selector.js",["233","234"],"import {createSelector} from 'reselect'\nimport {isImmutable} from 'immutable'\nimport _, { create } from 'lodash'\n\nconst groups = state => state.groups\n\nexport const messageSelector = createSelector(\n    groups,\n    data => data.get('message')\n)\nexport const loadingSelector = createSelector(\n    groups, \n    data => data.get('loading')\n)\n\nexport const errorSelector = createSelector(\n    groups,\n    data => {\n        let error = data.get('error')\n        if (isImmutable(error)){\n            return error.toJS()\n        }\n        return error\n    }\n)\n\nexport const listSelector = createSelector(\n    groups,\n    data => {\n        let groups = data.get('groups')\n        if(isImmutable(groups)){\n            return groups.toJS()\n        }\n        return []\n    }\n)\n\nexport const selectedSelector = createSelector(\n    groups, \n    data => {\n        let selected = data.get('selected')\n        if(selected.size > 0 && isImmutable(selected)){\n            return selected.toJS()\n        }\n        return []\n    }\n)","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/orderTable/index.js",["235","236","237","238","239"],"import React from 'react'\nimport { useTable } from 'react-table'\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport {HTML5Backend} from 'react-dnd-html5-backend'\nimport update from 'immutability-helper'\nimport MaUTable from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\nimport {FaHandPaper} from 'react-icons/fa'\nimport {sortedOptions} from 'modules/options/actions'\nimport {nowSortedArray} from 'modules/options/selector';\nimport {useDispatch, useSelector} from 'react-redux'\nfunction Table({ columns, data, updateCurrentRows }){\n  const [records, setRecords] = React.useState(data)\n  const getRowId = React.useCallback(row => {\n    return row.name\n  }, [])\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    data: records,\n    columns,\n    getRowId,\n  })\n  React.useEffect(() => {updateCurrentRows(rows)}, [rows])\n  const moveRow = (dragIndex, hoverIndex) => {\n    const dragRecord = records[dragIndex]\n    setRecords(\n      update(records, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, dragRecord],\n        ],\n      })\n    )\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              <TableHead/>\n              {headerGroup.headers.map(column => (\n                <TableCell {...column.getHeaderProps()}>{column.render('Header')}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map(\n            (row, index) =>\n            {\n            return   prepareRow(row) || (\n                <Row\n                  index={index}\n                  row={row}\n                  moveRow={moveRow}\n                  {...row.getRowProps()}\n                />\n              )\n            }\n          )}\n        </TableBody>\n      </MaUTable>\n    </DndProvider>\n  )\n}\n\nconst DND_ITEM_TYPE = 'row'\n\nconst Row = ({ row, index, moveRow }) => {\n  const dropRef = React.useRef(null)\n  const dragRef = React.useRef(null)\n\n  const [, drop] = useDrop({\n    accept: DND_ITEM_TYPE,\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect()\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      // Time to actually perform the action\n      moveRow(dragIndex, hoverIndex)\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: DND_ITEM_TYPE, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n\n  const opacity = isDragging ? 0 : 1\n\n  preview(drop(dropRef))\n  drag(dragRef)\n\n  return (\n    <TableRow ref={dropRef} style={{ opacity }}>\n      <TableCell ref={dragRef}><FaHandPaper/></TableCell>\n      {row.cells.map(cell => {\n        return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n      })}\n    </TableRow>\n  )\n}\n\nconst OrderTable = ({columns, data, updateCurrentRows}) => {\n  return (\n      <Table columns={columns} data={data} updateCurrentRows={updateCurrentRows}/>\n  )\n}\n\nexport default OrderTable","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/index.js",["240","241","242","243","244","245"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/App.js",["246"],"import \"./App.css\";\nimport Layout from \"Layouts\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"createStore\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nconst { store, persistor } = configureStore();\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Poppins\"],\n  },\n});\nwindow.onbeforeunload = function() {\n   localStorage.clear();\n}\nfunction App(props) {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <Router>\n            <Switch>\n              <Route path=\"/\" component={Layout}/>\n            </Switch>\n          </Router>\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  );\n}\nexport default App;\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/sagas.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/service.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/selector.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/items/reducer.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/reducer.js",["247"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/selector.js",["248"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/modifiers/selectors.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/addOption.js",["249","250","251","252","253"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport classname from \"classnames\";\nimport styles from \"./Options.module.sass\";\nimport { isEmpty, merge, map, assign } from \"lodash\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport Table from \"components/table\";\nimport OrderTable from \"components/orderTable\";\nimport { normalizeText as normalize } from \"utils/normalize\";\nimport {\n  addOption,\n  updateOption,\n  removeSelected,\n} from \"modules/options/actions\";\nimport {\n  loadingSelector,\n  errorSelector,\n  selectedOptionsSelector,\n} from \"modules/options/selector\";\nimport {\n  listSelector,\n  loadingSelector as modLoad,\n  errorSelector as modErr,\n  messageSelector as modifierMessageSelector\n} from \"modules/modifiers/selectors\";\nimport { listModfiers } from \"modules/modifiers/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  image_url: \"\",\n  price: \"\",\n  type: \"\",\n  modifiers: [],\n};\nconst validationSchema = yup.object({\n  name: yup.string().required(\"A valid option must have name\"),\n  description: yup.string().optional(),\n  price: yup.number().required(\"A valid option must have price\"),\n  type: yup.string().optional(),\n});\nconst columns = [\n  {\n    Header: \"Modifier\",\n    accessor: (d) => normalize(d.name),\n  },\n  {\n    Header: \"Options\",\n    accessor: \"options\",\n    Cell: (row) => {\n      return map(row.value, (r) => (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div style={{ display: \"grid\", gridTemplateColumns: \"100px 100px\" }}>\n            <div style={{ padding: \"0 5px\" }}>{normalize(r.name)}</div>\n            <div>{parseFloat(r.price).toFixed(2)}</div>\n          </div>\n        </div>\n      ));\n    },\n  },\n];\nexport default function AddOption(props) {\n  const dispatch = useDispatch();\n  const modifiers = useSelector(listSelector);\n  const modifierMessage = useSelector(modifierMessageSelector)\n  const mod_loading = useSelector(modLoad);\n  const mod_error = useSelector(modErr);\n  const nowOption = useSelector(selectedOptionsSelector);\n  const [step1, setStep1] = React.useState(false);\n  const [selected, setSelected] = React.useState(nowOption.modifiers || []);\n  const [formValues, setForm] = React.useState();\n  const [nowArray, setNowArray] = React.useState([]);\n  const [showSelected, setShow] = React.useState(false);\n  const history = useHistory();\n  const handleSaveItem = () => {\n    if (props.setOpen) {\n      props.setOpen(false);\n    }\n    setStep1(false);\n    const option = assign({}, formValues, {\n      modifiers: nowArray.map((_) => _.original.id),\n    });\n    if (!isEmpty(nowOption)) {\n      delete nowOption.modifiers\n      dispatch(updateOption(option));\n    } else {\n      dispatch(addOption(option));\n    }\n    setForm(\"\");\n    setSelected([]);\n    setNowArray([]);\n  };\n  React.useEffect(() => {\n    if(isEmpty(modifierMessage) && isEmpty(modifiers)) {\n      dispatch(listModfiers())\n    }\n    return () => dispatch(removeSelected());\n  }, [nowOption, dispatch]);\n  return (\n    <div className={classname(styles.container)}>\n      {!step1 && (\n        <>\n          <div style={{ dispay: \"flex\", justifyContent: \"center\" }}>\n            <p style={{ fontSize: \"1.5rem\", color: \"red\" }}>\n              {!isEmpty(nowOption) ? \"Update Option\" : \"Add Option\"}\n            </p>\n          </div>\n          <Formik\n            initialValues={\n              !isEmpty(nowOption) ? !isEmpty(formValues) ? formValues : nowOption : merge(initialValues, formValues)\n            }\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n              setForm(values);\n              setStep1(true);\n              setShow(true);\n            }}\n            enableReinitialize\n          >\n            {({ values, isValid }) => (\n              <Form>\n                <div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"name\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Option\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"name\"\n                        type=\"text\"\n                        className={classname(styles.formInput)}\n                        autoFocus={true}\n                      />\n                      <ErrorMessage\n                        style={{ color: \"red\" }}\n                        name={\"name\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"price\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Price\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"price\"\n                        type=\"number\"\n                        className={classname(styles.formInput)}\n                        min={0}\n                        step={0.01}\n                      />\n                      <ErrorMessage\n                        name={\"price\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                        style={{ color: \"red\" }}\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"type\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Type\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"type\"\n                        type=\"text\"\n                        className={classname(styles.formInput)}\n                      />\n                    </div>\n                    <ErrorMessage\n                      name={\"type\"}\n                      component=\"div\"\n                      className=\"field-error\"\n                    />\n                  </div>\n                  <div\n                    className={classname(styles.imageField, styles.formControl)}\n                  >\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"image_url\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Image\n                      </label>\n                    </div>\n                    <div>\n                      <input\n                        type=\"file\"\n                        name=\"image_url\"\n                        max={1}\n                        className={classname(styles.formInput)}\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.titleWithNoBox)}>\n                    <h4>Description</h4>\n                  </div>\n                  <div className={classname(styles.descriptionBox)}>\n                    <div>\n                      <Field\n                        as=\"textarea\"\n                        name=\"description\"\n                        type=\"text\"\n                        className={classname(styles.descriptionContainer)}\n                      />\n                    </div>\n                    <ErrorMessage\n                      name={\"description\"}\n                      component=\"div\"\n                      className=\"field-error\"\n                    />\n                  </div>\n                  <div className={classname(styles.saveButtonContainer)}>\n                    <button\n                      type=\"submit\"\n                      disabled={!isValid}\n                      className={classname(styles.ctaButton)}\n                    >\n                      {!isEmpty(nowOption)\n                        ? \"Edit Modifiers\"\n                        : \"Choose Modifers\"}\n                    </button>\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </>\n      )}\n      {step1 && (\n        <div className={classname(styles.tableContainer)}>\n          <div className={classname(styles.tableFlex)}>\n            <Table\n              title={\"Modifiers\"}\n              columns={columns}\n              data={modifiers}\n              updateSelectItems={setSelected}\n              withCheckBox={true}\n              noAction={true}\n              preSelected={selected}\n            />\n          </div>\n          <div>\n            <div className={classname(styles.margin5)}>\n              <button\n                className={classname(styles.button200)}\n                onClick={() => history.push(\"/addModifier\")}\n              >\n                Add Modifier\n              </button>\n            </div>\n          </div>\n          <div className={classname(styles.between)}>\n            <div>\n              <button\n                onClick={() => setStep1(false)}\n                className={classname(styles.ctaButton)}\n              >\n                Back\n              </button>\n            </div>\n            <div>\n              <button\n                disabled={!selected.length}\n                className={classname(styles.ctaButton)}\n                onClick={() => (selected.length ? setStep1(false) : null)}\n              >\n                Save\n              </button>\n              <div style={{ fontSize: \"10px\" }}>\n                {!selected.length && (\n                  <p>\n                    <span style={{ color: \"red\" }}>*</span> Select alteast 1\n                    modifier\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {selected.length && !step1 && showSelected ? (\n        <div style={{ flex: 1 }}>\n          <div>\n            <OrderTable\n              columns={columns}\n              data={selected}\n              updateCurrentRows={setNowArray}\n            />\n          </div>\n          <div\n            style={{\n              margin: \"10px auto\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <button\n              className={styles.ctaButton}\n              onClick={() => {\n                handleSaveItem();\n              }}\n            >\n              {!isEmpty(nowOption) ? \"Update Option\" : \"Add Option\"}\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n",{"ruleId":"254","severity":1,"message":"255","line":11,"column":10,"nodeType":"256","messageId":"257","endLine":11,"endColumn":17},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"254","severity":1,"message":"262","line":74,"column":9,"nodeType":"256","messageId":"257","endLine":74,"endColumn":16},{"ruleId":"254","severity":1,"message":"263","line":75,"column":9,"nodeType":"256","messageId":"257","endLine":75,"endColumn":14},{"ruleId":"254","severity":1,"message":"264","line":76,"column":9,"nodeType":"256","messageId":"257","endLine":76,"endColumn":24},{"ruleId":"254","severity":1,"message":"265","line":77,"column":9,"nodeType":"256","messageId":"257","endLine":77,"endColumn":21},{"ruleId":"254","severity":1,"message":"266","line":78,"column":9,"nodeType":"256","messageId":"257","endLine":78,"endColumn":24},{"ruleId":"267","severity":1,"message":"268","line":87,"column":6,"nodeType":"269","endLine":87,"endColumn":24,"suggestions":"270"},{"ruleId":"267","severity":1,"message":"271","line":92,"column":6,"nodeType":"269","endLine":92,"endColumn":24,"suggestions":"272"},{"ruleId":"258","replacedBy":"273"},{"ruleId":"260","replacedBy":"274"},{"ruleId":"254","severity":1,"message":"275","line":5,"column":8,"nodeType":"256","messageId":"257","endLine":5,"endColumn":13},{"ruleId":"254","severity":1,"message":"276","line":24,"column":10,"nodeType":"256","messageId":"257","endLine":24,"endColumn":19},{"ruleId":"254","severity":1,"message":"277","line":26,"column":10,"nodeType":"256","messageId":"257","endLine":26,"endColumn":21},{"ruleId":"254","severity":1,"message":"278","line":45,"column":9,"nodeType":"256","messageId":"257","endLine":45,"endColumn":15},{"ruleId":"254","severity":1,"message":"279","line":46,"column":9,"nodeType":"256","messageId":"257","endLine":46,"endColumn":16},{"ruleId":"254","severity":1,"message":"262","line":47,"column":9,"nodeType":"256","messageId":"257","endLine":47,"endColumn":16},{"ruleId":"254","severity":1,"message":"263","line":48,"column":9,"nodeType":"256","messageId":"257","endLine":48,"endColumn":14},{"ruleId":"254","severity":1,"message":"280","line":50,"column":10,"nodeType":"256","messageId":"257","endLine":50,"endColumn":18},{"ruleId":"254","severity":1,"message":"281","line":52,"column":10,"nodeType":"256","messageId":"257","endLine":52,"endColumn":17},{"ruleId":"267","severity":1,"message":"282","line":58,"column":6,"nodeType":"269","endLine":58,"endColumn":23,"suggestions":"283"},{"ruleId":"254","severity":1,"message":"263","line":64,"column":9,"nodeType":"256","messageId":"257","endLine":64,"endColumn":14},{"ruleId":"254","severity":1,"message":"284","line":65,"column":9,"nodeType":"256","messageId":"257","endLine":65,"endColumn":22},{"ruleId":"254","severity":1,"message":"265","line":66,"column":9,"nodeType":"256","messageId":"257","endLine":66,"endColumn":21},{"ruleId":"254","severity":1,"message":"285","line":75,"column":9,"nodeType":"256","messageId":"257","endLine":75,"endColumn":21},{"ruleId":"267","severity":1,"message":"286","line":106,"column":6,"nodeType":"269","endLine":106,"endColumn":16,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":137,"column":17,"nodeType":"290","endLine":137,"endColumn":35},{"ruleId":"291","severity":1,"message":"292","line":62,"column":9,"nodeType":"293","messageId":"294","endLine":63,"endColumn":58},{"ruleId":"291","severity":1,"message":"292","line":64,"column":9,"nodeType":"293","messageId":"294","endLine":65,"endColumn":68},{"ruleId":"267","severity":1,"message":"268","line":30,"column":5,"nodeType":"269","endLine":30,"endColumn":26,"suggestions":"295"},{"ruleId":"254","severity":1,"message":"280","line":31,"column":10,"nodeType":"256","messageId":"257","endLine":31,"endColumn":18},{"ruleId":"258","replacedBy":"296"},{"ruleId":"260","replacedBy":"297"},{"ruleId":"254","severity":1,"message":"263","line":32,"column":11,"nodeType":"256","messageId":"257","endLine":32,"endColumn":16},{"ruleId":"254","severity":1,"message":"298","line":33,"column":12,"nodeType":"256","messageId":"257","endLine":33,"endColumn":16},{"ruleId":"254","severity":1,"message":"299","line":22,"column":7,"nodeType":"256","messageId":"257","endLine":22,"endColumn":12},{"ruleId":"254","severity":1,"message":"300","line":34,"column":7,"nodeType":"256","messageId":"257","endLine":34,"endColumn":16},{"ruleId":"254","severity":1,"message":"301","line":66,"column":9,"nodeType":"256","messageId":"257","endLine":66,"endColumn":14},{"ruleId":"267","severity":1,"message":"302","line":131,"column":6,"nodeType":"269","endLine":131,"endColumn":16,"suggestions":"303"},{"ruleId":"267","severity":1,"message":"304","line":132,"column":21,"nodeType":"305","endLine":132,"endColumn":34},{"ruleId":"254","severity":1,"message":"306","line":176,"column":5,"nodeType":"256","messageId":"257","endLine":176,"endColumn":16},{"ruleId":"267","severity":1,"message":"307","line":224,"column":6,"nodeType":"269","endLine":224,"endColumn":41,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":18,"column":25,"nodeType":"311","endLine":18,"endColumn":102},{"ruleId":"254","severity":1,"message":"312","line":7,"column":9,"nodeType":"256","messageId":"257","endLine":7,"endColumn":22},{"ruleId":"254","severity":1,"message":"313","line":7,"column":24,"nodeType":"256","messageId":"257","endLine":7,"endColumn":33},{"ruleId":"254","severity":1,"message":"314","line":7,"column":35,"nodeType":"256","messageId":"257","endLine":7,"endColumn":47},{"ruleId":"254","severity":1,"message":"315","line":7,"column":49,"nodeType":"256","messageId":"257","endLine":7,"endColumn":57},{"ruleId":"267","severity":1,"message":"316","line":20,"column":5,"nodeType":"269","endLine":20,"endColumn":18,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":10,"column":1,"nodeType":"320","endLine":71,"endColumn":2},{"ruleId":"254","severity":1,"message":"321","line":5,"column":45,"nodeType":"256","messageId":"257","endLine":5,"endColumn":57},{"ruleId":"254","severity":1,"message":"276","line":12,"column":10,"nodeType":"256","messageId":"257","endLine":12,"endColumn":19},{"ruleId":"254","severity":1,"message":"277","line":13,"column":10,"nodeType":"256","messageId":"257","endLine":13,"endColumn":21},{"ruleId":"254","severity":1,"message":"322","line":88,"column":9,"nodeType":"256","messageId":"257","endLine":88,"endColumn":16},{"ruleId":"254","severity":1,"message":"278","line":89,"column":9,"nodeType":"256","messageId":"257","endLine":89,"endColumn":15},{"ruleId":"254","severity":1,"message":"279","line":90,"column":9,"nodeType":"256","messageId":"257","endLine":90,"endColumn":16},{"ruleId":"254","severity":1,"message":"262","line":93,"column":9,"nodeType":"256","messageId":"257","endLine":93,"endColumn":16},{"ruleId":"254","severity":1,"message":"323","line":94,"column":9,"nodeType":"256","messageId":"257","endLine":94,"endColumn":21},{"ruleId":"254","severity":1,"message":"324","line":95,"column":9,"nodeType":"256","messageId":"257","endLine":95,"endColumn":22},{"ruleId":"254","severity":1,"message":"325","line":96,"column":9,"nodeType":"256","messageId":"257","endLine":96,"endColumn":18},{"ruleId":"254","severity":1,"message":"326","line":102,"column":10,"nodeType":"256","messageId":"257","endLine":102,"endColumn":21},{"ruleId":"254","severity":1,"message":"327","line":102,"column":23,"nodeType":"256","messageId":"257","endLine":102,"endColumn":37},{"ruleId":"254","severity":1,"message":"328","line":3,"column":8,"nodeType":"256","messageId":"257","endLine":3,"endColumn":9},{"ruleId":"254","severity":1,"message":"329","line":3,"column":13,"nodeType":"256","messageId":"257","endLine":3,"endColumn":19},{"ruleId":"254","severity":1,"message":"330","line":12,"column":9,"nodeType":"256","messageId":"257","endLine":12,"endColumn":22},{"ruleId":"254","severity":1,"message":"331","line":13,"column":9,"nodeType":"256","messageId":"257","endLine":13,"endColumn":23},{"ruleId":"254","severity":1,"message":"332","line":14,"column":9,"nodeType":"256","messageId":"257","endLine":14,"endColumn":20},{"ruleId":"254","severity":1,"message":"333","line":14,"column":22,"nodeType":"256","messageId":"257","endLine":14,"endColumn":33},{"ruleId":"267","severity":1,"message":"334","line":32,"column":52,"nodeType":"269","endLine":32,"endColumn":58,"suggestions":"335"},{"ruleId":"254","severity":1,"message":"262","line":17,"column":9,"nodeType":"256","messageId":"257","endLine":17,"endColumn":16},{"ruleId":"254","severity":1,"message":"265","line":18,"column":9,"nodeType":"256","messageId":"257","endLine":18,"endColumn":21},{"ruleId":"267","severity":1,"message":"268","line":24,"column":7,"nodeType":"269","endLine":24,"endColumn":26,"suggestions":"336"},{"ruleId":"254","severity":1,"message":"280","line":26,"column":10,"nodeType":"256","messageId":"257","endLine":26,"endColumn":18},{"ruleId":"254","severity":1,"message":"337","line":28,"column":10,"nodeType":"256","messageId":"257","endLine":28,"endColumn":14},{"ruleId":"254","severity":1,"message":"338","line":28,"column":16,"nodeType":"256","messageId":"257","endLine":28,"endColumn":23},{"ruleId":"254","severity":1,"message":"339","line":7,"column":3,"nodeType":"256","messageId":"257","endLine":7,"endColumn":11},{"ruleId":"291","severity":1,"message":"292","line":25,"column":9,"nodeType":"293","messageId":"294","endLine":26,"endColumn":75},{"ruleId":"254","severity":1,"message":"328","line":3,"column":8,"nodeType":"256","messageId":"257","endLine":3,"endColumn":9},{"ruleId":"254","severity":1,"message":"340","line":17,"column":3,"nodeType":"256","messageId":"257","endLine":17,"endColumn":18},{"ruleId":"254","severity":1,"message":"341","line":18,"column":3,"nodeType":"256","messageId":"257","endLine":18,"endColumn":16},{"ruleId":"254","severity":1,"message":"342","line":67,"column":9,"nodeType":"256","messageId":"257","endLine":67,"endColumn":20},{"ruleId":"254","severity":1,"message":"343","line":68,"column":9,"nodeType":"256","messageId":"257","endLine":68,"endColumn":18},{"ruleId":"267","severity":1,"message":"344","line":99,"column":6,"nodeType":"269","endLine":99,"endColumn":27,"suggestions":"345"},"no-unused-vars","'isEmpty' is defined but never used.","Identifier","unusedVar","no-native-reassign",["346"],"no-negated-in-lhs",["347"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'options_loading' is assigned a value but never used.","'option_error' is assigned a value but never used.","'options_message' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'message'. Either include it or remove the dependency array.","ArrayExpression",["348"],"React Hook React.useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["349"],["346"],["347"],"'items' is defined but never used.","'listGroup' is defined but never used.","'listOptions' is defined but never used.","'groups' is assigned a value but never used.","'options' is assigned a value but never used.","'selected' is assigned a value but never used.","'newItem' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'itemInfo'. Either include it or remove the dependency array.",["350"],"'option_loding' is assigned a value but never used.","'customStyles' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["351"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected",["352"],["346"],["347"],"'form' is assigned a value but never used.","'style' is assigned a value but never used.","'newStyles' is assigned a value but never used.","'count' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'columns'. Either include it or remove the dependency array.",["353"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","'pageOptions' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selectedFlatRows'. Either include it or remove the dependency array.",["354"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FaObjectGroup' is defined but never used.","'FaSitemap' is defined but never used.","'FaPizzaSlice' is defined but never used.","'FaDiceD6' is defined but never used.","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["355"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'isEmptyArray' is defined but never used.","'history' is assigned a value but never used.","'groupLoading' is assigned a value but never used.","'optionLoading' is assigned a value but never used.","'groupInfo' is assigned a value but never used.","'optionArray' is assigned a value but never used.","'setOptionArray' is assigned a value but never used.","'_' is defined but never used.","'create' is defined but never used.","'sortedOptions' is defined but never used.","'nowSortedArray' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","React Hook React.useEffect has a missing dependency: 'updateCurrentRows'. Either include it or remove the dependency array. If 'updateCurrentRows' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["356"],["357"],"'list' is assigned a value but never used.","'setList' is assigned a value but never used.","'Redirect' is defined but never used.","'loadingSelector' is defined but never used.","'errorSelector' is defined but never used.","'mod_loading' is assigned a value but never used.","'mod_error' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'modifierMessage' and 'modifiers'. Either include them or remove the dependency array.",["358"],"no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},"Update the dependencies array to be: [dispatch, groups, message]",{"range":"381","text":"382"},"Update the dependencies array to be: [dispatch, groups, options]",{"range":"383","text":"384"},"Update the dependencies array to be: [dispatch, itemInfo, items]",{"range":"385","text":"386"},"Update the dependencies array to be: [dispatch, nowGroup]",{"range":"387","text":"388"},"Update the dependencies array to be: [dispatch, message, modifiers]",{"range":"389","text":"390"},"Update the dependencies array to be: [columns, noAction]",{"range":"391","text":"392"},"Update the dependencies array to be: [updateSelectItems, selectedRowIds, selectedFlatRows]",{"range":"393","text":"394"},"Update the dependencies array to be: [activeRoute, history]",{"range":"395","text":"396"},"Update the dependencies array to be: [rows, updateCurrentRows]",{"range":"397","text":"398"},"Update the dependencies array to be: [dispatch, message, options]",{"range":"399","text":"400"},"Update the dependencies array to be: [nowOption, dispatch, modifierMessage, modifiers]",{"range":"401","text":"402"},[2513,2531],"[dispatch, groups, message]",[2651,2669],"[dispatch, groups, options]",[1855,1872],"[dispatch, itemInfo, items]",[3016,3026],"[dispatch, nowGroup]",[1086,1107],"[dispatch, message, modifiers]",[3251,3261],"[columns, noAction]",[5538,5573],"[updateSelectItems, selectedRowIds, selectedFlatRows]",[703,716],"[activeRoute, history]",[1075,1081],"[rows, updateCurrentRows]",[1051,1070],"[dispatch, message, options]",[3075,3096],"[nowOption, dispatch, modifierMessage, modifiers]"]