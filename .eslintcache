[{"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/App.js":"1","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Pizza/index.js":"2","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/constants.js":"3","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/addGroup.js":"4","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/addModifier.js":"5","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/index.js":"6","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Grid/GridContainer.js":"7","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/selector.js":"8","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reportWebVitals.js":"9","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reducers.js":"10","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/index.js":"11","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/index.js":"12","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/orderTable/index.js":"13","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/actions.js":"14","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/reducer.js":"15","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/routes.js":"16","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/Layouts/index.js":"17","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/utils/normalize.js":"18","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/addItem.js":"19","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/table/index.js":"20","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/createStore.js":"21","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Grid/GridItem.js":"22","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/index.js":"23","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/sidebarRoutes.js":"24","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/index.js":"25","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/addOption.js":"26"},{"size":912,"mtime":1615192472950,"results":"27","hashOfConfig":"28"},{"size":1064,"mtime":1613558109343,"results":"29","hashOfConfig":"28"},{"size":1051,"mtime":1613727067867,"results":"30","hashOfConfig":"31"},{"size":12974,"mtime":1615303136174,"results":"32","hashOfConfig":"28"},{"size":10267,"mtime":1615227162948,"results":"33","hashOfConfig":"28"},{"size":4484,"mtime":1615226500669,"results":"34","hashOfConfig":"28"},{"size":854,"mtime":1613727067867,"results":"35","hashOfConfig":"28"},{"size":1414,"mtime":1613727067867,"results":"36","hashOfConfig":"28"},{"size":362,"mtime":1613558109347,"results":"37","hashOfConfig":"28"},{"size":189,"mtime":1613727067867,"results":"38","hashOfConfig":"28"},{"size":5170,"mtime":1615304538076,"results":"39","hashOfConfig":"28"},{"size":3176,"mtime":1613727067871,"results":"40","hashOfConfig":"28"},{"size":4596,"mtime":1613727067867,"results":"41","hashOfConfig":"31"},{"size":598,"mtime":1613727067867,"results":"42","hashOfConfig":"28"},{"size":1955,"mtime":1613727067867,"results":"43","hashOfConfig":"28"},{"size":1857,"mtime":1615297289296,"results":"44","hashOfConfig":"28"},{"size":367,"mtime":1615192430968,"results":"45","hashOfConfig":"28"},{"size":136,"mtime":1613558109347,"results":"46","hashOfConfig":"31"},{"size":13934,"mtime":1613976604869,"results":"47","hashOfConfig":"31"},{"size":8900,"mtime":1615226224544,"results":"48","hashOfConfig":"28"},{"size":1130,"mtime":1613558109347,"results":"49","hashOfConfig":"28"},{"size":676,"mtime":1613727067867,"results":"50","hashOfConfig":"31"},{"size":1184,"mtime":1615192396706,"results":"51","hashOfConfig":"28"},{"size":1487,"mtime":1615192465866,"results":"52","hashOfConfig":"31"},{"size":3649,"mtime":1615297871581,"results":"53","hashOfConfig":"28"},{"size":11738,"mtime":1615297689803,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"ds2j73",{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"sy1zlp",{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"69"},"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/App.js",["120"],"import \"./App.css\";\nimport Layout from \"Layouts\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"createStore\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nconst { store, persistor } = configureStore();\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\"Poppins\"],\n  },\n});\nfunction App(props) {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <Router>\n            <Switch>\n              <Route path=\"/\" component={Layout}/>\n            </Switch>\n          </Router>\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  );\n}\nexport default App;\n",["121","122"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Pizza/index.js",["123","124"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/constants.js",[],["125","126"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/addGroup.js",["127","128","129","130","131"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/addModifier.js",["132","133","134","135","136","137","138"],"import React from 'react';\nimport classname from 'classnames'\nimport styles from './Modifiers.module.sass';\nimport { Formik, ErrorMessage, Field, Form, FieldArray } from 'formik';\nimport * as yup from 'yup';\nimport {FaPlusSquare, FaMinusSquare} from 'react-icons/fa'\nimport _ from 'lodash';\nimport axios from 'axios'\nconst initialValues = {\n    name: '',\n    options: [\n        {\n            name: '',\n            price: '',\n        },\n    ],\n};\nconst validationSchema = yup.object().shape({\n    name: yup.string().required('Name is required'),\n    options: yup.array().of(yup.object().shape({\n        name: yup.string(),\n        price: yup.number()\n    })).required('Options are required').min(1, 'Enter atleast 2 option')\n}) \nexport default function AddModifier(props) {\n    const baseUrl = 'http://127.0.0.1:8000/api/modifiers/' \n    const [modifier, setModifier] = React.useState()\n    const [loading, setLoading] = React.useState(false)\n    const [error, setError] = React.useState(false)\n    React.useEffect(() => {\n    if(!_.isEmpty(props.location) && !_.isEmpty(props.location.state)) {\n        setModifier(_.get(props, 'location.state'))\n    }\n    }, [modifier])\n    return (\n        <div className={classname(styles.container)}>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <p style={{ fontSize: \"1.5rem\", color: \"red\" }}>{modifier ? \"Update Modifier\" : \"Add Modifier\"}</p>\n            </div>\n            <Formik\n                initialValues={modifier ? _.merge(initialValues, modifier) : initialValues}\n                validationSchema={validationSchema}\n                onSubmit={async (values) => {\n                    let promise\n                    if(modifier) {\n                        promise = axios.put(baseUrl+modifier.id+\"/\", values)\n                    }\n                    else {\n                        promise = axios.post(baseUrl, values);\n                    }\n                    promise.then(res => {\n                        if(res.status === 200) {\n                            alert('Modifier added successfully')\n                        }\n                        else if (res.status === 202){\n                            alert('Modifier updated successfully')\n                        }\n                    }).catch(err => {\n                        alert('Unable to add modifier. Please try again')\n                    })\n                }}\n            >\n                {({ values }) => (\n                    <Form>\n                        <div>\n                            <div className={classname(styles.formControl)}>\n                                <div>\n                                    <label htmlFor=\"name\" className={classname(styles.formLable)}>Modifier</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"name\"\n                                        type=\"text\"\n                                        className={classname(styles.formInput)}\n                                    />\n                                <ErrorMessage\n                                    name={\"name\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                    style={{color: 'red'}}\n                                />\n                                </div>\n                            </div>\n                            <div>\n                                <div className={classname(styles.titleWithNoBox)}>\n                                    <h4>\n                                        Options\n                                    </h4>\n                                </div>\n                                <FieldArray name=\"options\">\n                                    {({ insert, remove, push, form }) => (\n                                        <div>\n                                            {values.options.length > 0 &&\n                                                values.options.map((option, index) => (\n                                                    <div className={classname(styles.horizontalContent)} key={index}>\n                                                        <div className={classname(styles.formControl)}>\n                                                            <div>\n                                                                <label className={classname(styles.formLable)} htmlFor={`options.${index}.name`}>Name</label>\n                                                            </div>\n                                                            <div>\n                                                                <Field\n                                                                    name={`options.${index}.name`}\n                                                                    type=\"text\"\n                                                                    className={classname(styles.formInput)}\n                                                                />\n                                                            </div>\n                                                            <ErrorMessage\n                                                                name={`options.${index}.name`}\n                                                                component=\"div\"\n                                                                className=\"field-error\"\n                                                            />\n                                                        </div>\n                                                        <div className={classname(styles.formControl)}>\n                                                            <div>\n                                                                <label className={classname(styles.formLable)} htmlFor={`options.${index}.price`}>Price</label>\n                                                            </div>\n                                                            <div>\n                                                                <Field\n                                                                    name={`options.${index}.price`}\n                                                                    type=\"number\"\n                                                                    step=\"0.01\"\n                                                                    className={classname(styles.formInput)}\n                                                                />\n                                                            </div>\n                                                            <ErrorMessage\n                                                                name={`options.${index}.price`}\n                                                                component=\"div\"\n                                                                className=\"field-error\"\n                                                            />\n                                                        </div>\n                                                        <div className={classname(styles.button_container)}>\n                                                            {index === 0 ? null :\n                                                                <div style={{padding:'10px'}}>\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        className=\"secondary\"\n                                                                        onClick={() => remove(index)}\n                                                                        className={classname(styles.common_button)}\n                                                                    >\n                                                                        <FaMinusSquare style={{fontSize: '24px'}}/>\n                                                                    </button>\n                                                                </div>\n                                                            }\n                                                            {\n                                                                index !== 0 ? null :\n                                                                    <div style={{padding: '10px'}}>\n                                                                        <button\n                                                                            type=\"button\"\n                                                                            className=\"secondary\"\n                                                                            onClick={() => insert(0, { name: '', price: '' })}\n                                                                            className={classname(styles.common_button)}\n                                                                        >\n                                                                        <FaPlusSquare style={{fontSize: '24px'}}/>\n                                                                        </button>\n                                                                    </div>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                </FieldArray>\n                            </div>\n                                <ErrorMessage name=\"options\" style={{color:'red'}}/>\n                        </div>\n                        <div className={classname(styles.saveButtonContainer)}>\n                            <button type=\"submit\" className={classname(styles.ctaButton)}>{modifier ? \"Save Modifier\" : \"Add Modifier\"}</button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n",["139","140"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Modifiers/index.js",["141","142","143","144","145"],"import React from \"react\";\nimport classname from \"classnames\";\nimport styles from \"./Modifiers.module.sass\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from \"components/table\";\nimport modifiers from \"./modifiers.json\";\nimport { normalizeText as normalize } from \"utils/normalize\";\nimport _ from \"lodash\";\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\nimport Modal from \"react-modal\";\nimport AddModifier from \"./addModifier\";\nimport axios from \"axios\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nexport default function Modifiers() {\n  const [selected, setSelected] = React.useState();\n  const [open, setOpen] = React.useState();\n  const [step1, setStep1] = React.useState(false);\n  const [formValues, setForm] = React.useState();\n  const [list, setList] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [err, setError] = React.useState();\n  const [request, setRequest] = React.useState(false)\n  const history = useHistory();\n  const baseUrl = \"http://127.0.0.1:8000/api/modifiers/\"\n  React.useEffect(() => {\n    setLoading(true);\n    let promise = axios.get(baseUrl);\n    promise\n      .then((res) => {\n        setList(res.data);\n        setError();\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(err);\n        setLoading(false);\n      });\n  }, []);\n  const handleEdit = (option) => {\n    delete option.actions\n    history.push(\n      '/addModifier',\n      option\n    )\n  }\n  const handleDelete = option => {\n    const confirm = window.confirm(`You are about to remove ${option.name}. This action is not reversable.`)\n    if (confirm) {\n      const removeModifier = axios.delete(baseUrl +option.id + \"/\")\n      removeModifier.then(res => {\n        if(res.status === 204) {\n          alert('Modifier removed successfully')\n        }\n      })\n    }\n  }\n  const customStyles = {\n    content: {\n      margin: \"auto\",\n      height: \"80%\",\n      width: \"100%\",\n      maxWidth: \"600px\",\n      overflow: \"auto\",\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      bottom: \"auto\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n  const columns = [\n    {\n      Header: \"Modifier\",\n      accessor: (d) => normalize(d.name),\n    },\n    {\n      Header: \"Options\",\n      accessor: \"options\",\n      Cell: (row) => {\n        return _.map(row.value, (r) => (\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <div\n              style={{ display: \"grid\", gridTemplateColumns: \"100px 100px\" }}\n            >\n              <div style={{ padding: \"0 5px\" }}>{normalize(r.name)}</div>\n              <div>{parseFloat(r.price).toFixed(2)}</div>\n            </div>\n          </div>\n        ));\n      },\n    },\n    {\n      Header: \"Actions\",\n      accessor: \"actions\",\n    },\n  ];\n  _.map(list, (option) =>\n    _.assign(option, {\n      actions: (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div style={{ padding: \"0 5px\" }}>\n            <button onClick={() => handleEdit(option)}>\n              <FaEdit />\n            </button>\n          </div>\n          <div>\n            <button>\n              <FaTrash onClick={() => handleDelete(option)}/>\n            </button>\n          </div>\n        </div>\n      ),\n    })\n  );\n  return (\n    <div className={classname(styles.tableContainer)}>\n      {loading && <div style={{display: 'flex', justifyContent:'center', alignItems: 'center'}}><CircularProgress/></div>}\n      <Modal\n        isOpen={open}\n        onRequestClose={() => {\n          setOpen(false);\n          setStep1(false);\n        }}\n        style={customStyles}\n      >\n        {step1 && (\n          <div>\n            <button onClick={() => setStep1(false)}>Back</button>\n          </div>\n        )}\n        {!step1 ? (\n          <AddModifier\n            next={setStep1}\n            formMethod={setForm}\n            currentForm={formValues}\n            setOpen={setOpen}\n          />\n        ) : (\n          <div></div>\n        )}\n      </Modal>\n      <div>\n        <Table\n          columns={columns}\n          data={list}\n          updateSelectItems={setSelected}\n        />\n      </div>\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", margin: \"20px\" }}\n      >\n        <button\n          onClick={() => setOpen(true)}\n          className={classname(styles.ctaButton)}\n        >\n          Add Modifier\n        </button>\n      </div>\n    </div>\n  );\n}\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Grid/GridContainer.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/selector.js",["146"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reportWebVitals.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/reducers.js",["147"],"import {combineReducers} from 'redux'\nimport optionReducer from 'modules/options/reducer';\n\nexport default function () {\n    return combineReducers({\n        options: optionReducer\n    })\n}","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Groups/index.js",["148"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/index.js",["149","150","151"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/orderTable/index.js",["152","153","154","155","156"],"import React from 'react'\nimport { useTable } from 'react-table'\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport {HTML5Backend} from 'react-dnd-html5-backend'\nimport update from 'immutability-helper'\nimport MaUTable from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\nimport {FaHandPaper} from 'react-icons/fa'\nimport {sortedOptions} from 'modules/options/actions'\nimport {nowSortedArray} from 'modules/options/selector';\nimport {useDispatch, useSelector} from 'react-redux'\nfunction Table({ columns, data, updateCurrentRows }){\n  const [records, setRecords] = React.useState(data)\n  const getRowId = React.useCallback(row => {\n    return row.name\n  }, [])\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    data: records,\n    columns,\n    getRowId,\n  })\n  React.useEffect(() => {updateCurrentRows(rows)}, [rows])\n  const moveRow = (dragIndex, hoverIndex) => {\n    const dragRecord = records[dragIndex]\n    setRecords(\n      update(records, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, dragRecord],\n        ],\n      })\n    )\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              <TableHead/>\n              {headerGroup.headers.map(column => (\n                <TableCell {...column.getHeaderProps()}>{column.render('Header')}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map(\n            (row, index) =>\n            {\n            return   prepareRow(row) || (\n                <Row\n                  index={index}\n                  row={row}\n                  moveRow={moveRow}\n                  {...row.getRowProps()}\n                />\n              )\n            }\n          )}\n        </TableBody>\n      </MaUTable>\n    </DndProvider>\n  )\n}\n\nconst DND_ITEM_TYPE = 'row'\n\nconst Row = ({ row, index, moveRow }) => {\n  const dropRef = React.useRef(null)\n  const dragRef = React.useRef(null)\n\n  const [, drop] = useDrop({\n    accept: DND_ITEM_TYPE,\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect()\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      // Time to actually perform the action\n      moveRow(dragIndex, hoverIndex)\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: DND_ITEM_TYPE, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n\n  const opacity = isDragging ? 0 : 1\n\n  preview(drop(dropRef))\n  drag(dragRef)\n\n  return (\n    <TableRow ref={dropRef} style={{ opacity }}>\n      <TableCell ref={dragRef}><FaHandPaper/></TableCell>\n      {row.cells.map(cell => {\n        return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n      })}\n    </TableRow>\n  )\n}\n\nconst OrderTable = ({columns, data, updateCurrentRows}) => {\n  return (\n      <Table columns={columns} data={data} updateCurrentRows={updateCurrentRows}/>\n  )\n}\n\nexport default OrderTable",["157","158"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/actions.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/modules/options/reducer.js",["159"],"import {fromJS, List} from 'immutable';\nimport * as Actions from './constants';\n\nconst initState = fromJS({\n    loading: false,\n    error: '',\n    options: List(),\n    selectedOptions: List(),\n    optionToEdit: '',\n    sortedOptions: List()\n})\n\nexport default function optionReducer(state=initState, action) {\n    const {type, payload, error} = action\n    switch (type) {\n        case Actions.STATE_LOADING:\n            return state.set('loading', !state.get('loading'))\n        //add\n        case Actions.ADD_OPTION:\n            return state.set('loading', true).set('error', initState.get('error'))\n        case Actions.ADD_OPTION_SUCCESS:\n            return state.set('loading', false).set('options', fromJS(payload)).set('error', initState.get('error')) \n        case Actions.ADD_OPTION_SUCCESS:\n            return state.set('loading', false).set('error', fromJS(error))\n        //remove\n        case Actions.REMOVE_OPTION:\n            return state.set('loading', true).set('error', initState.get('error'));\n        case Actions.REMOVE_OPTION_SUCCESS:\n            return state.set('loading', false)\n        case Actions.REMOVE_OPTION_ERROR:\n            return state.set('loading', false).set('error', fromJS(error))\n        //update\n        case Actions.UPDATE_OPTION:\n            return state.set('loading', true).set('error', initState.get('error'));\n        case Actions.UPDATE_OPTION_SUCCESS:\n            return state.set('loading', false)\n        case Actions.UPDATE_OPTION_ERROR:\n            return state.set('loading', false).set('error', fromJS(error))\n        //list\n        case Actions.LIST_OPTIONS:\n            return state.set('loading', true).set('error', initState.get('error'));\n        case Actions.LIST_OPTIONS_SUCCESS:\n            return state.set('loading', false)\n        case Actions.LIST_OPTIONS_ERROR:\n            return state.set('loading', false).set('error', fromJS(error))\n        default:\n            return state\n    } \n}","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/routes.js",["160"],"import AddOptions from 'views/Options/addOption'\nimport OptionsList from 'views/Options'\nimport Groups from 'views/Groups';\nimport AddGroup from 'views/Groups/addGroup'\nimport ListItems from 'views/Items';\nimport AddItem from 'views/Items/addItem';\nimport Modifiers from 'views/Modifiers'\nimport AddModifier from 'views/Modifiers/addModifier';\nexport default function () {\n    return [\n        {\n            path: \"/options\",\n            name: \"Options\",\n            icon: '/assets/options.svg',\n            component: OptionsList,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addOption\",\n            name: \"Add option\",\n            icon: \"\",\n            component: AddOptions,\n            layout: \"/pizza\",\n        },\n        {\n            path: '/modifiers',\n            name: 'Modifiers',\n            icon: '/assets/modifier.svg',\n            component: Modifiers,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addModifier\",\n            name: \"Add Modifier\",\n            icon: \"\",\n            component: AddModifier,\n            layout: \"/pizza\"\n        },\n        {\n            path: '/items',\n            name: 'Items',\n            icon: '/assets/menu.svg',\n            component: ListItems,\n            layout: \"/pizza\",\n        },\n        {\n            path: \"/addItem\",\n            name: \"Add Item\",\n            icon: \"\",\n            component: AddItem,\n            layout: \"/pizza\"\n        }\n        ,{\n            path: '/groups',\n            name: 'Option groups',\n            icon: '/assets/groups.svg',\n            component: Groups,\n            layout: \"/pizza\",\n            children: [\n            ]\n        },\n        {\n            path: \"/addgroup\",\n            name: \"add option group\",\n            icon: \"\",\n            component: AddGroup,\n            layout: \"/pizza\"\n        }\n    ]\n}","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/Layouts/index.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/utils/normalize.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Items/addItem.js",["161","162"],"import React from \"react\";\nimport classname from \"classnames\";\nimport styles from \"./Items.module.sass\";\nimport _ from \"lodash\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport Groups from \"../Groups/groups.json\";\nimport Options from \"../Options/options.json\";\nimport { normalizeText as normalize } from \"utils/normalize\";\nimport Modal from \"react-modal\";\nimport Switch from \"react-switch\";\nimport Table from \"components/table\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  FaRegObjectGroup,\n  FaEdit,\n} from \"react-icons/fa\";\nimport OrderTable from \"components/orderTable\";\nlet tableData = Groups.concat(Options);\ntableData = _.sortBy(tableData, [\"name\"]);\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  image_url: \"\",\n  price: \"\",\n  type: \"\",\n  stock: \"\",\n};\nconst validationSchema = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  description: yup.string().optional(),\n  price: yup.number().required(\"Price is required\"),\n  type: yup.string().optional(),\n  stock: yup.number().optional(),\n});\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return (\n          <div>\n            {d.name}\n            <FaRegObjectGroup style={{ padding: \"0 5px\" }} />\n          </div>\n        );\n      } else {\n        return d.name;\n      }\n    },\n  },\n  {\n    Header: \"Price\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.price_default;\n      } else return d.price;\n    },\n  },\n  {\n    Header: \"Min\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.min_required;\n      } else return \"-\";\n    },\n  },\n  {\n    Header: \"Max\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.max_allowed;\n      } else return \"-\";\n    },\n  },\n  {\n    Header: \"Order\",\n    accessor: (d) => {\n      if (!_.isUndefined(d.min_required)) {\n        return d.display_order;\n      } else return \"-\";\n    },\n  },\n  {\n    Header: \"Actions\",\n    accessor: \"actions\",\n  },\n];\nexport default function AddOption(props) {\n  const [active, setActive] = React.useState(true);\n  const [step1, setStep1] = React.useState(false);\n  const [selected, setSelected] = React.useState([]);\n  const [formValues, setForm] = React.useState();\n  const [nowArray, setNowArray] = React.useState();\n  const history = useHistory();\n  _.map(tableData, (item) =>\n    _.assign(item, {\n      actions: (\n        <div style={{ display: \"flex\" }}>\n          <div style={{ padding: \"0 5px\" }}>\n            <button>\n              <FaEdit />\n            </button>\n          </div>\n        </div>\n      ),\n    })\n  );\n  const handleSaveItem = () => {\n      // we get all the row props, insted we only want original\n    const originalArray = _.map(nowArray, n => n.original); \n    const values = formValues;\n    const finalItem = _.assign({}, values, {options: originalArray})\n    props.setItem(finalItem)\n    setForm(null);\n  };\n  return (\n    <div>\n      <div className={classname(styles.container)} style={{ flex: 1 }}>\n        {!step1 && (\n          <div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <p style={{ fontSize: \"1.5rem\", color: \"red\" }}>Add Item</p>\n            </div>\n            <Formik\n              initialValues={_.merge(initialValues, formValues)}\n              validationSchema={validationSchema}\n              onSubmit={async (values) => {\n                setForm(values);\n                setStep1(true);\n              }}\n            >\n              {({ values }) => (\n                <Form>\n                  <div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"name\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Item\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"name\"\n                          type=\"text\"\n                          className={classname(styles.formInput)}\n                          autoFocus={true}\n                        />\n                        <ErrorMessage\n                          name={\"name\"}\n                          component=\"div\"\n                          style={{ color: \"red\" }}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"price\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Price\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"price\"\n                          type=\"number\"\n                          className={classname(styles.formInput)}\n                          min={0}\n                          step={0.01}\n                        />\n                        <ErrorMessage\n                          name={\"price\"}\n                          component=\"div\"\n                          style={{ color: \"red\" }}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"type\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Type\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"type\"\n                          type=\"text\"\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"stock\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                         Stock\n                        </label>\n                      </div>\n                      <div>\n                        <Field\n                          name=\"stock\"\n                          type=\"number\"\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.formControl)}>\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"active\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Active\n                        </label>\n                      </div>\n                      <div>\n                        <Field name=\"active\">\n                          {({ field, form, meta }) => (\n                            <Switch\n                              name=\"active\"\n                              {...field}\n                              onChange={(e) => {\n                                setActive(e);\n                              }}\n                              checked={active}\n                            />\n                          )}\n                        </Field>\n                      </div>\n                      <ErrorMessage\n                        name={\"type\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div\n                      className={classname(\n                        styles.imageField,\n                        styles.formControl\n                      )}\n                    >\n                      <div className={classname(styles.labelContainer)}>\n                        <label\n                          htmlFor=\"modifier_image\"\n                          className={classname(\n                            styles.formLabel,\n                            styles.labelContainer\n                          )}\n                        >\n                          Image\n                        </label>\n                      </div>\n                      <div>\n                        <input\n                          type=\"file\"\n                          name=\"modifier_image\"\n                          max={1}\n                          className={classname(styles.formInput)}\n                        />\n                      </div>\n                    </div>\n                    <div className={classname(styles.titleWithNoBox)}>\n                      <h4>Description</h4>\n                    </div>\n                    <div className={classname(styles.descriptionBox)}>\n                      <div>\n                        <Field\n                          as=\"textarea\"\n                          name=\"description\"\n                          type=\"text\"\n                          className={classname(styles.descriptionContainer)}\n                        />\n                      </div>\n                      <ErrorMessage\n                        name={\"description\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                    <div className={classname(styles.saveButtonContainer)}>\n                      <button\n                        type=\"submit\"\n                        className={classname(styles.ctaButton)}\n                      >\n                        Add Options\n                      </button>\n                    </div>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        )}\n        {step1 && (\n          <div className={classname(styles.tableContainer)}>\n            <div className={classname(styles.tableFlex)}>\n              <Table\n                title={\"Options and groups\"}\n                columns={columns}\n                data={tableData}\n                updateSelectItems={setSelected}\n                withCheckBox={true}\n                noAction={true}\n                preSelected={_.map(selected, (s) => s.name)}\n              />\n            </div>\n            <div>\n              <div className={classname(styles.margin5)}>\n                <button\n                  className={classname(styles.button200)}\n                  onClick={() => history.push(\"/addGroup\")}\n                >\n                  Add OptionGroup\n                </button>\n              </div>\n              <div>\n                <button\n                  className={classname(styles.button200)}\n                  onClick={() => history.push(\"/addOption\")}\n                >\n                  Add Option\n                </button>\n              </div>\n            </div>\n            <div className={classname(styles.between)}>\n              <div>\n                <button\n                  onClick={() => setStep1(false)}\n                  className={classname(styles.ctaButton)}\n                >\n                  Back\n                </button>\n              </div>\n              <div>\n                <button\n                  disabled={!selected.length}\n                  className={classname(styles.ctaButton)}\n                  onClick={() => (selected.length ? setStep1(false) : null)}\n                >\n                  Add to Item\n                </button>\n                <div style={{ fontSize: \"10px\" }}>\n                  {!selected.length && (\n                    <p>\n                      <span style={{ color: \"red\" }}>*</span> Select alteast 1\n                      option\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {selected.length && !step1 ? (\n        <div style={{ flex: 1 }}>\n          <div>\n            <OrderTable\n              columns={columns}\n              data={selected}\n              updateCurrentRows={setNowArray}\n            />\n          </div>\n          <div\n            style={{\n              margin: \"10px auto\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <button\n              className={styles.ctaButton}\n              onClick={() => {\n                props.setOpen(false);\n                handleSaveItem();\n              }}\n            >\n              Save Item\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/table/index.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/createStore.js",["190","191"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Grid/GridItem.js",[],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/index.js",["192"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/components/Sidebar/sidebarRoutes.js",["193","194","195"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/index.js",["196","197"],"/home/manisha/dev/clients/upwork/echola/echola_menu_front/src/views/Options/addOption.js",["198","199","200","201"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport classname from \"classnames\";\nimport styles from \"./Options.module.sass\";\nimport _ from \"lodash\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport Table from \"components/table\";\nimport OrderTable from \"components/orderTable\";\nimport { normalizeText as normalize } from \"utils/normalize\";\nimport axios from \"axios\";\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  image_url: \"\",\n  price: \"\",\n  type: \"\",\n  modifiers: [],\n};\nconst validationSchema = yup.object({\n  name: yup.string().required(\"A valid option must have name\"),\n  description: yup.string().optional(),\n  image_url: yup.string().optional(),\n  price: yup.number().required(\"A valid option must have price\"),\n  type: yup.string().optional(),\n});\nconst columns = [\n  {\n    Header: \"Modifier\",\n    accessor: (d) => normalize(d.name),\n  },\n  {\n    Header: \"Options\",\n    accessor: \"options\",\n    Cell: (row) => {\n      return _.map(row.value, (r) => (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div style={{ display: \"grid\", gridTemplateColumns: \"100px 100px\" }}>\n            <div style={{ padding: \"0 5px\" }}>{normalize(r.name)}</div>\n            <div>{parseFloat(r.price).toFixed(2)}</div>\n          </div>\n        </div>\n      ));\n    },\n  },\n];\nexport default function AddOption(props) {\n  const baseUrl = \"http://127.0.0.1:8000/api/\";\n  const [step1, setStep1] = React.useState(false);\n  const [nowOption, setNowOption] = React.useState();\n  const [selected, setSelected] = React.useState([]);\n  const [formValues, setForm] = React.useState();\n  const [nowArray, setNowArray] = React.useState([]);\n  const [reset, setReset] = React.useState(false);\n  const [modifiers, setModifiers] = React.useState([]);\n  const history = useHistory();\n  const handleSaveItem = () => {\n    if (props.setOpen) {\n      props.setOpen(false);\n    }\n    setStep1(false);\n    if(!_.isEmpty(nowOption)) {\n      const id = formValues.id\n      delete formValues.id\n      const option = _.assign({}, formValues, {modifiers: _.map(selected, s => s.id)})\n      const response = axios.put(baseUrl+`options/${id}/`, option)\n      response.then(snapshot => {\n        if (snapshot.status === 201){\n          alert('Option updated successfully')\n        }\n      })\n      .catch(err => {\n        console.log(err)\n        alert('Unable update option.')\n      })\n    }\n    else {\n      const response = axios.post(baseUrl+\"options/\", _.assign({}, formValues, {modifiers: _.map(selected, s => s.id)}))\n      response.then(snapshot => {\n        if(snapshot.status === 200){\n          alert('Option added option')\n        }\n      })\n      .catch(err => {\n        console.log(err)\n        alert('Unable to add option')\n      })\n    }\n    setReset(true);\n    setForm(\"\");\n    setSelected([]);\n    setNowArray([]);\n  };\n  React.useEffect(() => {\n    if (!_.isEmpty(props) && !_.isEmpty(props.location)) {\n      const data = _.get(props, \"location.state\")\n      setNowOption(data)\n    }\n    const response = axios.get(baseUrl + \"modifiers/\");\n    response\n      .then((snapshot) => {\n        if (snapshot.status === 200) {\n          setModifiers(snapshot.data);\n        }\n      })\n      .catch((err) => console.log(err));\n    return () => setNowOption(\"\");\n  }, [nowOption]);\n  const dynamicValues = !_.isEmpty(nowOption)\n    ? _.merge(initialValues, nowOption)\n    : _.merge(initialValues, formValues);\n  return (\n    <div className={classname(styles.container)}>\n      {!step1 && (\n        <>\n          <div style={{ dispay: \"flex\", justifyContent: \"center\" }}>\n            <p style={{ fontSize: \"1.5rem\", color: \"red\" }}>\n              {nowOption ? \"Update Option\" : \"Add Option\"}\n            </p>\n          </div>\n          <Formik\n            initialValues={_.merge(initialValues, nowOption, formValues)}\n            validationSchema={validationSchema}\n            onSubmit={async (values) => {\n              setForm(values);\n              setStep1(true);\n            }}\n            enableReinitialize\n          >\n            {({ values }) => (\n              <Form>\n                <div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"name\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Option\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"name\"\n                        type=\"text\"\n                        className={classname(styles.formInput)}\n                        autoFocus={true}\n                      />\n                      <ErrorMessage\n                        style={{ color: \"red\" }}\n                        name={\"name\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"price\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Price\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"price\"\n                        type=\"number\"\n                        className={classname(styles.formInput)}\n                        min={0}\n                        step={0.01}\n                      />\n                      <ErrorMessage\n                        name={\"price\"}\n                        component=\"div\"\n                        className=\"field-error\"\n                        style={{ color: \"red\" }}\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.formControl)}>\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"type\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Type\n                      </label>\n                    </div>\n                    <div>\n                      <Field\n                        name=\"type\"\n                        type=\"text\"\n                        className={classname(styles.formInput)}\n                      />\n                    </div>\n                    <ErrorMessage\n                      name={\"type\"}\n                      component=\"div\"\n                      className=\"field-error\"\n                    />\n                  </div>\n                  <div\n                    className={classname(styles.imageField, styles.formControl)}\n                  >\n                    <div className={classname(styles.labelContainer)}>\n                      <label\n                        htmlFor=\"modifier_image\"\n                        className={classname(\n                          styles.formLabel,\n                          styles.labelContainer\n                        )}\n                      >\n                        Image\n                      </label>\n                    </div>\n                    <div>\n                      <input\n                        type=\"file\"\n                        name=\"modifier_image\"\n                        max={1}\n                        className={classname(styles.formInput)}\n                      />\n                    </div>\n                  </div>\n                  <div className={classname(styles.titleWithNoBox)}>\n                    <h4>Description</h4>\n                  </div>\n                  <div className={classname(styles.descriptionBox)}>\n                    <div>\n                      <Field\n                        as=\"textarea\"\n                        name=\"description\"\n                        type=\"text\"\n                        className={classname(styles.descriptionContainer)}\n                      />\n                    </div>\n                    <ErrorMessage\n                      name={\"description\"}\n                      component=\"div\"\n                      className=\"field-error\"\n                    />\n                  </div>\n                  <div className={classname(styles.saveButtonContainer)}>\n                    <button\n                      type=\"submit\"\n                      className={classname(styles.ctaButton)}\n                    >\n                      {nowOption ? \"Edit Modifiers\" : \"Choose Modifers\"}\n                    </button>\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </>\n      )}\n      {step1 && (\n        <div className={classname(styles.tableContainer)}>\n          <div className={classname(styles.tableFlex)}>\n            <Table\n              title={\"Options and groups\"}\n              columns={columns}\n              data={modifiers}\n              updateSelectItems={setSelected}\n              withCheckBox={true}\n              noAction={true}\n              preSelected={\n                !_.isEmpty(nowOption)\n                  ? nowOption.modifiers\n                  : _.map(selected, (s) => s.name)\n              }\n            />\n          </div>\n          <div>\n            <div className={classname(styles.margin5)}>\n              <button\n                className={classname(styles.button200)}\n                onClick={() => history.push(\"/addModifier\")}\n              >\n                Add Modifier\n              </button>\n            </div>\n          </div>\n          <div className={classname(styles.between)}>\n            <div>\n              <button\n                onClick={() => setStep1(false)}\n                className={classname(styles.ctaButton)}\n              >\n                Back\n              </button>\n            </div>\n            <div>\n              <button\n                disabled={!selected.length}\n                className={classname(styles.ctaButton)}\n                onClick={() => (selected.length ? setStep1(false) : null)}\n              >\n                Save\n              </button>\n              <div style={{ fontSize: \"10px\" }}>\n                {!selected.length && (\n                  <p>\n                    <span style={{ color: \"red\" }}>*</span> Select alteast 1\n                    modifer\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {selected.length && !step1 ? (\n        <div style={{ flex: 1 }}>\n          <div>\n            <OrderTable\n              columns={columns}\n              data={selected}\n              updateCurrentRows={setNowArray}\n            />\n          </div>\n          <div\n            style={{\n              margin: \"10px auto\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <button\n              className={styles.ctaButton}\n              onClick={() => {\n                handleSaveItem();\n              }}\n            >\n              {!_.isEmpty(nowOption) ? \"Update Option\" : \"Add Option\"}\n            </button>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n",{"ruleId":"202","severity":1,"message":"203","line":7,"column":3,"nodeType":"204","messageId":"205","endLine":7,"endColumn":11},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"202","severity":1,"message":"203","line":2,"column":25,"nodeType":"204","messageId":"205","endLine":2,"endColumn":33},{"ruleId":"202","severity":1,"message":"210","line":8,"column":12,"nodeType":"204","messageId":"205","endLine":8,"endColumn":21},{"ruleId":"206","replacedBy":"211"},{"ruleId":"208","replacedBy":"212"},{"ruleId":"202","severity":1,"message":"213","line":8,"column":27,"nodeType":"204","messageId":"205","endLine":8,"endColumn":36},{"ruleId":"202","severity":1,"message":"214","line":54,"column":10,"nodeType":"204","messageId":"205","endLine":54,"endColumn":18},{"ruleId":"202","severity":1,"message":"215","line":55,"column":10,"nodeType":"204","messageId":"205","endLine":55,"endColumn":17},{"ruleId":"216","severity":1,"message":"217","line":77,"column":6,"nodeType":"218","endLine":77,"endColumn":16,"suggestions":"219"},{"ruleId":"202","severity":1,"message":"220","line":78,"column":9,"nodeType":"204","messageId":"205","endLine":78,"endColumn":21},{"ruleId":"202","severity":1,"message":"215","line":28,"column":12,"nodeType":"204","messageId":"205","endLine":28,"endColumn":19},{"ruleId":"202","severity":1,"message":"221","line":28,"column":21,"nodeType":"204","messageId":"205","endLine":28,"endColumn":31},{"ruleId":"202","severity":1,"message":"222","line":29,"column":12,"nodeType":"204","messageId":"205","endLine":29,"endColumn":17},{"ruleId":"202","severity":1,"message":"223","line":29,"column":19,"nodeType":"204","messageId":"205","endLine":29,"endColumn":27},{"ruleId":"216","severity":1,"message":"224","line":34,"column":8,"nodeType":"218","endLine":34,"endColumn":18,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":138,"column":73,"nodeType":"228","endLine":138,"endColumn":116},{"ruleId":"226","severity":1,"message":"227","line":151,"column":77,"nodeType":"228","endLine":151,"endColumn":120},{"ruleId":"206","replacedBy":"229"},{"ruleId":"208","replacedBy":"230"},{"ruleId":"202","severity":1,"message":"231","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":17},{"ruleId":"202","severity":1,"message":"232","line":15,"column":10,"nodeType":"204","messageId":"205","endLine":15,"endColumn":18},{"ruleId":"202","severity":1,"message":"233","line":21,"column":10,"nodeType":"204","messageId":"205","endLine":21,"endColumn":13},{"ruleId":"202","severity":1,"message":"234","line":22,"column":10,"nodeType":"204","messageId":"205","endLine":22,"endColumn":17},{"ruleId":"202","severity":1,"message":"235","line":22,"column":19,"nodeType":"204","messageId":"205","endLine":22,"endColumn":29},{"ruleId":"202","severity":1,"message":"236","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":9},{"ruleId":"237","severity":1,"message":"238","line":4,"column":1,"nodeType":"239","endLine":8,"endColumn":2},{"ruleId":"202","severity":1,"message":"215","line":66,"column":10,"nodeType":"204","messageId":"205","endLine":66,"endColumn":17},{"ruleId":"202","severity":1,"message":"213","line":7,"column":27,"nodeType":"204","messageId":"205","endLine":7,"endColumn":36},{"ruleId":"202","severity":1,"message":"232","line":27,"column":12,"nodeType":"204","messageId":"205","endLine":27,"endColumn":20},{"ruleId":"202","severity":1,"message":"240","line":30,"column":11,"nodeType":"204","messageId":"205","endLine":30,"endColumn":18},{"ruleId":"202","severity":1,"message":"241","line":12,"column":9,"nodeType":"204","messageId":"205","endLine":12,"endColumn":22},{"ruleId":"202","severity":1,"message":"242","line":13,"column":9,"nodeType":"204","messageId":"205","endLine":13,"endColumn":23},{"ruleId":"202","severity":1,"message":"243","line":14,"column":9,"nodeType":"204","messageId":"205","endLine":14,"endColumn":20},{"ruleId":"202","severity":1,"message":"244","line":14,"column":22,"nodeType":"204","messageId":"205","endLine":14,"endColumn":33},{"ruleId":"216","severity":1,"message":"245","line":32,"column":52,"nodeType":"218","endLine":32,"endColumn":58,"suggestions":"246"},{"ruleId":"206","replacedBy":"247"},{"ruleId":"208","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":23,"column":9,"nodeType":"251","messageId":"252","endLine":24,"endColumn":75},{"ruleId":"237","severity":1,"message":"238","line":9,"column":1,"nodeType":"239","endLine":70,"endColumn":2},{"ruleId":"202","severity":1,"message":"213","line":9,"column":27,"nodeType":"204","messageId":"205","endLine":9,"endColumn":36},{"ruleId":"202","severity":1,"message":"253","line":10,"column":8,"nodeType":"204","messageId":"205","endLine":10,"endColumn":13},{"ruleId":"202","severity":1,"message":"254","line":14,"column":8,"nodeType":"204","messageId":"205","endLine":14,"endColumn":19},{"ruleId":"202","severity":1,"message":"255","line":15,"column":8,"nodeType":"204","messageId":"205","endLine":15,"endColumn":14},{"ruleId":"202","severity":1,"message":"256","line":16,"column":8,"nodeType":"204","messageId":"205","endLine":16,"endColumn":16},{"ruleId":"202","severity":1,"message":"257","line":17,"column":8,"nodeType":"204","messageId":"205","endLine":17,"endColumn":21},{"ruleId":"202","severity":1,"message":"258","line":18,"column":8,"nodeType":"204","messageId":"205","endLine":18,"endColumn":16},{"ruleId":"202","severity":1,"message":"259","line":27,"column":7,"nodeType":"204","messageId":"205","endLine":27,"endColumn":12},{"ruleId":"202","severity":1,"message":"260","line":39,"column":7,"nodeType":"204","messageId":"205","endLine":39,"endColumn":16},{"ruleId":"202","severity":1,"message":"261","line":71,"column":9,"nodeType":"204","messageId":"205","endLine":71,"endColumn":14},{"ruleId":"202","severity":1,"message":"262","line":132,"column":10,"nodeType":"204","messageId":"205","endLine":132,"endColumn":22},{"ruleId":"202","severity":1,"message":"263","line":132,"column":24,"nodeType":"204","messageId":"205","endLine":132,"endColumn":39},{"ruleId":"202","severity":1,"message":"264","line":133,"column":10,"nodeType":"204","messageId":"205","endLine":133,"endColumn":20},{"ruleId":"202","severity":1,"message":"265","line":133,"column":22,"nodeType":"204","messageId":"205","endLine":133,"endColumn":38},{"ruleId":"216","severity":1,"message":"266","line":139,"column":6,"nodeType":"218","endLine":139,"endColumn":16,"suggestions":"267"},{"ruleId":"216","severity":1,"message":"268","line":140,"column":21,"nodeType":"269","endLine":140,"endColumn":34},{"ruleId":"202","severity":1,"message":"270","line":184,"column":5,"nodeType":"204","messageId":"205","endLine":184,"endColumn":13},{"ruleId":"202","severity":1,"message":"271","line":186,"column":5,"nodeType":"204","messageId":"205","endLine":186,"endColumn":14},{"ruleId":"202","severity":1,"message":"272","line":187,"column":5,"nodeType":"204","messageId":"205","endLine":187,"endColumn":17},{"ruleId":"202","severity":1,"message":"273","line":188,"column":5,"nodeType":"204","messageId":"205","endLine":188,"endColumn":20},{"ruleId":"202","severity":1,"message":"274","line":189,"column":5,"nodeType":"204","messageId":"205","endLine":189,"endColumn":16},{"ruleId":"202","severity":1,"message":"275","line":190,"column":5,"nodeType":"204","messageId":"205","endLine":190,"endColumn":16},{"ruleId":"202","severity":1,"message":"276","line":191,"column":5,"nodeType":"204","messageId":"205","endLine":191,"endColumn":13},{"ruleId":"202","severity":1,"message":"277","line":192,"column":14,"nodeType":"204","messageId":"205","endLine":192,"endColumn":23},{"ruleId":"202","severity":1,"message":"278","line":192,"column":25,"nodeType":"204","messageId":"205","endLine":192,"endColumn":33},{"ruleId":"202","severity":1,"message":"279","line":233,"column":7,"nodeType":"204","messageId":"205","endLine":233,"endColumn":21},{"ruleId":"280","severity":1,"message":"281","line":236,"column":9,"nodeType":"282","messageId":"283","endLine":236,"endColumn":18},{"ruleId":"202","severity":1,"message":"284","line":237,"column":7,"nodeType":"204","messageId":"205","endLine":237,"endColumn":23},{"ruleId":"216","severity":1,"message":"285","line":244,"column":6,"nodeType":"218","endLine":244,"endColumn":41,"suggestions":"286"},{"ruleId":"202","severity":1,"message":"287","line":19,"column":7,"nodeType":"204","messageId":"205","endLine":19,"endColumn":21},{"ruleId":"237","severity":1,"message":"288","line":22,"column":1,"nodeType":"239","endLine":31,"endColumn":2},{"ruleId":"289","severity":1,"message":"290","line":18,"column":25,"nodeType":"291","endLine":18,"endColumn":102},{"ruleId":"202","severity":1,"message":"292","line":3,"column":10,"nodeType":"204","messageId":"205","endLine":3,"endColumn":21},{"ruleId":"216","severity":1,"message":"293","line":18,"column":5,"nodeType":"218","endLine":18,"endColumn":18,"suggestions":"294"},{"ruleId":"289","severity":1,"message":"290","line":31,"column":25,"nodeType":"291","endLine":31,"endColumn":91},{"ruleId":"202","severity":1,"message":"295","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":15},{"ruleId":"202","severity":1,"message":"232","line":13,"column":10,"nodeType":"204","messageId":"205","endLine":13,"endColumn":18},{"ruleId":"202","severity":1,"message":"214","line":53,"column":10,"nodeType":"204","messageId":"205","endLine":53,"endColumn":18},{"ruleId":"202","severity":1,"message":"296","line":54,"column":10,"nodeType":"204","messageId":"205","endLine":54,"endColumn":15},{"ruleId":"216","severity":1,"message":"297","line":108,"column":6,"nodeType":"218","endLine":108,"endColumn":17,"suggestions":"298"},{"ruleId":"202","severity":1,"message":"299","line":109,"column":9,"nodeType":"204","messageId":"205","endLine":109,"endColumn":22},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["300"],"no-negated-in-lhs",["301"],"'component' is assigned a value but never used.",["300"],["301"],"'normalize' is defined but never used.","'nowArray' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. If 'setGroup' needs the current value of 'props', you can also switch to useReducer instead of useState and read 'props' in the reducer.","ArrayExpression",["302"],"'customStyles' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. If 'setModifier' needs the current value of 'props', you can also switch to useReducer instead of useState and read 'props' in the reducer.",["303"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["300"],["301"],"'modifiers' is defined but never used.","'selected' is assigned a value but never used.","'err' is assigned a value but never used.","'request' is assigned a value but never used.","'setRequest' is assigned a value but never used.","'_' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'history' is assigned a value but never used.","'sortedOptions' is defined but never used.","'nowSortedArray' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","React Hook React.useEffect has a missing dependency: 'updateCurrentRows'. Either include it or remove the dependency array. If 'updateCurrentRows' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["304"],["300"],["301"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'Modal' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'GridContainer' is defined but never used.","'GridItem' is defined but never used.","'style' is assigned a value but never used.","'newStyles' is assigned a value but never used.","'count' is assigned a value but never used.","'numberOfRows' is assigned a value but never used.","'setNumberOfRows' is assigned a value but never used.","'pageSelect' is assigned a value but never used.","'handlePageSelect' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'columns'. Either include it or remove the dependency array.",["305"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","'nextPage' is assigned a value but never used.","'pageCount' is assigned a value but never used.","'previousPage' is assigned a value but never used.","'canPreviousPage' is assigned a value but never used.","'canNextPage' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'gotoPage' is assigned a value but never used.","'pageIndex' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'pageSelectData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","'numberOfRowsData' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selectedFlatRows'. Either include it or remove the dependency array.",["306"],"'sagaMiddleware' is assigned a value but never used.","Assign arrow function to a variable before exporting as module default","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useLocation' is defined but never used.","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["307"],"'options' is defined but never used.","'reset' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["308"],"'dynamicValues' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},"Update the dependencies array to be: [nowGroup, props]",{"range":"323","text":"324"},"Update the dependencies array to be: [modifier, props]",{"range":"325","text":"326"},"Update the dependencies array to be: [rows, updateCurrentRows]",{"range":"327","text":"328"},"Update the dependencies array to be: [columns, noAction]",{"range":"329","text":"330"},"Update the dependencies array to be: [updateSelectItems, selectedRowIds, selectedFlatRows]",{"range":"331","text":"332"},"Update the dependencies array to be: [activeRoute, history]",{"range":"333","text":"334"},"Update the dependencies array to be: [nowOption, props]",{"range":"335","text":"336"},[2208,2218],"[nowGroup, props]",[1160,1170],"[modifier, props]",[1075,1081],"[rows, updateCurrentRows]",[3669,3679],"[columns, noAction]",[6273,6308],"[updateSelectItems, selectedRowIds, selectedFlatRows]",[588,601],"[activeRoute, history]",[3352,3363],"[nowOption, props]"]