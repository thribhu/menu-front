[{"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/index.js":"1","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/Layouts/index.js":"2","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/utils/normalize.js":"3","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Sidebar/index.js":"4","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/reportWebVitals.js":"5","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Pizza/index.js":"6","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/App.js":"7","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/createStore.js":"8","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modules/options/reducer.js":"9","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/routes.js":"10","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Options/addOption.js":"11","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Items/index.js":"12","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/utils/isValidImage.js":"13","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Groups/addGroup.js":"14","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Sidebar/sidebarRoutes.js":"15","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Modifiers/addModifier.js":"16","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Options/index.js":"17","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Modifiers/index.js":"18","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modules/options/constants.js":"19","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Groups/index.js":"20","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Items/addItem.js":"21","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/reducers.js":"22","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modals/Groups/index.js":"23","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modals/Options/index.js":"24"},{"size":500,"mtime":1611552944563,"results":"25","hashOfConfig":"26"},{"size":367,"mtime":1612337528682,"results":"27","hashOfConfig":"26"},{"size":136,"mtime":1612337528712,"results":"28","hashOfConfig":"26"},{"size":1075,"mtime":1612337528698,"results":"29","hashOfConfig":"26"},{"size":362,"mtime":1611552944567,"results":"30","hashOfConfig":"26"},{"size":1064,"mtime":1612337528690,"results":"31","hashOfConfig":"26"},{"size":529,"mtime":1612338734514,"results":"32","hashOfConfig":"26"},{"size":1130,"mtime":1612337528700,"results":"33","hashOfConfig":"26"},{"size":1928,"mtime":1611679635817,"results":"34","hashOfConfig":"26"},{"size":1857,"mtime":1612337528707,"results":"35","hashOfConfig":"26"},{"size":6808,"mtime":1612338191364,"results":"36","hashOfConfig":"26"},{"size":507,"mtime":1612337528721,"results":"37","hashOfConfig":"26"},{"size":179,"mtime":1612337528711,"results":"38","hashOfConfig":"26"},{"size":8992,"mtime":1612338167864,"results":"39","hashOfConfig":"26"},{"size":1457,"mtime":1612337528699,"results":"40","hashOfConfig":"26"},{"size":8646,"mtime":1612338211267,"results":"41","hashOfConfig":"26"},{"size":556,"mtime":1612337528729,"results":"42","hashOfConfig":"26"},{"size":524,"mtime":1612337528724,"results":"43","hashOfConfig":"26"},{"size":857,"mtime":1612337528704,"results":"44","hashOfConfig":"26"},{"size":510,"mtime":1612337528718,"results":"45","hashOfConfig":"26"},{"size":14016,"mtime":1612510806555,"results":"46","hashOfConfig":"26"},{"size":172,"mtime":1612337528706,"results":"47","hashOfConfig":"26"},{"size":2935,"mtime":1612507157361,"results":"48","hashOfConfig":"26"},{"size":2515,"mtime":1612509212052,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"15bsurr",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"57"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/index.js",[],["110","111"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/Layouts/index.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/utils/normalize.js",[],["112","113"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Sidebar/index.js",["114"],"import React from 'react';\nimport styles from './Sidebar.module.sass';\nimport classname from 'classnames';\nimport default_img from './default.jpg';\nimport { normalizeText } from 'utils/normalize'\nimport SidebarRoutes from './sidebarRoutes'\nexport default function Sidebar(props) {\n    const {\n        title,\n        img\n    } = props;\n    return (\n        <div className={classname(styles.main)}>\n            <div className={classname(styles.sidebar_header)}>\n                <div class={classname(styles.titleBox)}>\n                    <div className={classname(styles.avatar)}>\n                        <img src={img ? img : default_img} className={classname(styles.avatarImg)} />\n                    </div>\n                    <div className={classname(styles.title)}>\n                        <h1>{title ? normalizeText(title) : normalizeText('echola pizza')}</h1>\n                    </div>\n                </div>\n            </div>\n            <div className={classname(styles.sidebar_content)}>\n                <SidebarRoutes />\n            </div>\n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/reportWebVitals.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Pizza/index.js",["115","116"],"import React from 'react';\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport styles from './Pizza.module.sass'\nimport classname from 'classnames';\nimport routes from 'routes';\nimport Group from 'views/Groups'\nexport default function Pizza(props){\n    const {component} = props;\n    const getRoutes = (routes) => {\n        return routes.map((prop, key) => {\n          if (prop.children) {\n            return getRoutes(prop.children);\n          }\n          if (prop.layout === \"/pizza\") {\n              let _routes = <Route\n                path={prop.path}\n                component={prop.component}\n                key={key}\n              />\n              return _routes\n          } else {\n            return null;\n          }\n        });\n      };\n    return (\n        <div className={classname(styles.pizza)}>\n          {/* <div className={classname(styles.topBar)}>\n\n          </div> */}\n           <Switch>\n               {getRoutes(routes())}\n               <Route path=\"/groups\" component={Group}/>\n           </Switch> \n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/App.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/createStore.js",["117","118"],"import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistReducer, persistStore} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from 'reducers';\n//import rootSaga from './sagas';\nimport immutableTransform from 'redux-persist-transform-immutable';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    transforms: [immutableTransform()],\n    whitelist:  [\"\"]\n}\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? composeWithDevTools({ realtime: true }) : compose;\n// persisting the reducer and creating a reference to saga instance \nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst sagaMiddleware = createSagaMiddleware();\n\n\nexport default () => {\n    const enhancer = composeEnhancers(applyMiddleware());\n\n    const store =  createStore(persistedReducer, enhancer);\n    const  persistor = persistStore(store);\n    \n    //run saga middleware\n//    sagaMiddleware.run(rootSaga);\n    return {store, persistor};\n}\n",["119","120"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modules/options/reducer.js",["121"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/routes.js",["122"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Options/addOption.js",["123","124","125"],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Items/index.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/utils/isValidImage.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Groups/addGroup.js",["126","127"],"import React from 'react';\nimport classname from 'classnames';\nimport styles from './Groups.module.sass'\nimport _ from 'lodash';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport options from '../Options/options.json'\nimport { normalizeText as normalize } from 'utils/normalize'\nconst initialValues = {\n    name: '',\n    description: '',\n    price: '',\n    price_default: 2,\n    options: [],\n    min_required: 1,\n    max_allowed: 1,\n    display_order: 100\n}\nconst validationSchema = yup.object({\n    name: yup.string().required('A valid option must have name'),\n    description: yup.string().optional(),\n    image_url: yup.string().optional(),\n    price: yup.number().required('A valid option must have price'),\n    type: yup.string().optional(),\n})\nexport default function AddGroup(props) {\n    return (\n        <div className={classname(styles.container)}>\n            <div className={classname(styles.formTitle)}>\n                <h4>\n                    Add Group\n                </h4>\n            </div>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={async (values) => {\n                    await new Promise((r) => setTimeout(r, 500));\n                    alert(JSON.stringify(values, null, 2));\n                }}\n            >\n                {({ values }) => (\n                    <Form>\n                        <div>\n                            <div className={classname(styles.formControl)}>\n                                <div className={classname(styles.labelContainer)}>\n                                    <label htmlFor=\"name\" className={classname(styles.formLabel, styles.labelContainer)}>Name</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"name\"\n                                        type=\"text\"\n                                        className={classname(styles.formInput)}\n                                        autoFocus={true}\n                                        required\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"name\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div className={classname(styles.formControl)}>\n                                <div className={classname(styles.labelContainer)}>\n                                    <label htmlFor=\"min_required\" className={classname(styles.formLabel, styles.labelContainer)}>Min Required</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"min_required\"\n                                        value={values.min_required}\n                                        type=\"number\"\n                                        min={1}\n                                        className={classname(styles.formInput)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"min_required\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div className={classname(styles.formControl)}>\n                                <div className={classname(styles.labelContainer)}>\n                                    <label htmlFor=\"max_allowed\" className={classname(styles.formLabel, styles.labelContainer)}>Max Allowed</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"max_allowed\"\n                                        value={values.max_allowed}\n                                        type=\"number\"\n                                        min={1}\n                                        className={classname(styles.formInput)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"max_allowed\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div className={classname(styles.formControl)}>\n                                <div className={classname(styles.labelContainer)}>\n                                    <label htmlFor=\"price_default\" className={classname(styles.formLabel, styles.labelContainer)}>Price Default</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"price_default\"\n                                        value={values.price_default}\n                                        type=\"number\"\n                                        min={1}\n                                        className={classname(styles.formInput)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"max_allowed\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div className={classname(styles.formControl)}>\n                                <div className={classname(styles.labelContainer)}>\n                                    <label htmlFor=\"display_order\" className={classname(styles.formLabel, styles.labelContainer)}>Display order</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"display_order\"\n                                        value={values.display_order}\n                                        type=\"number\"\n                                        min={0}\n                                        className={classname(styles.formInput)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"max_allowed\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div className={classname(styles.titleWithNoBox)}>\n                                <h4>Description</h4>\n                            </div>\n                            <div className={classname(styles.formControl)}>\n                                <div>\n                                    <Field\n                                        as=\"textarea\"\n                                        name=\"description\"\n                                        type=\"text\"\n                                        className={classname(styles.descriptionContainer)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"name\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n\n                            <div>\n                                <h4 className={classname(styles.titleWithNoBox)}>\n                                    Select Options\n                            </h4>\n                                <div role=\"group\" className={classname(styles.checkboxContainer)}>\n                                    {options.map((m, i) => (\n                                        <label className={classname(styles.checkBoxLabel)}>\n                                            <Field type=\"checkbox\" name=\"options\" value={m.name + i} key={i} />\n                                            {normalize(m.name)}\n                                        </label>\n                                    ))}\n                                </div>\n                            </div>\n                            <div className={classname(styles.saveButtonContainer)}>\n                                <button type=\"submit\" className={classname(styles.ctaButton)}>Save Option</button>\n                            </div>\n                        </div>\n                    </Form>\n                )\n                }\n            </Formik >\n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/components/Sidebar/sidebarRoutes.js",["128","129","130"],"import routes from 'routes';\nimport { map, sortBy } from 'lodash'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport classname from 'classnames';\nimport styles from './Sidebar.module.sass'\nexport default function SidebarRoutes() {\n    const location = useLocation();\n    const history = useHistory();\n    const currentPath = location.pathname;\n    const sortedRoutes = sortBy(routes(), [\"name\"]);\n    const handleClick = (route) => {\n        debugger\n        if (!route) return null;\n        let { component } = route\n        history.push(route.path)\n    }\n\n    return (\n        <div className={classname(styles.nav_links)}>\n            {map(sortedRoutes, route =>\n                {\n                    if(!route.icon) return null\n                return (\n                <div \n                    className={classname([styles.link_container, styles.isALinkContainer])}\n                    key={route.name} \n                    onClick={() => handleClick(route)}\n                >\n                    <div className={classname(styles.avatar_container)}>\n                        <img src={route.icon} className={classname(styles.link_avatar)} />\n                    </div>\n                    <div className={classname(styles.link_text)}>\n                        <p>\n                            {route.name}\n                        </p>\n                    </div>\n                </div>\n                )}\n            )}\n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Modifiers/addModifier.js",["131","132","133","134","135","136"],"import React from 'react';\nimport classname from 'classnames'\nimport styles from './Modifiers.module.sass';\nimport { Formik, ErrorMessage, Field, Form, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport _ from 'lodash';\nconst initialValues = {\n    name: '',\n    options: [\n        {\n            name: '',\n            price: '',\n        },\n    ],\n};\nexport default function AddModifier() {\n    return (\n        <div className={classname(styles.container)}>\n            <div className={classname(styles.formTitle)}>\n                Add Modifier\n            </div>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={async (values) => {\n                    await new Promise((r) => setTimeout(r, 500));\n                    if((values.options[0].name || values.options[0].price) === ''){\n                        values.options.splice(0,1)\n                    }\n                    alert(JSON.stringify(values, null, 2));\n                }}\n            >\n                {({ values }) => (\n                    <Form>\n                        <div>\n                            <div className={classname(styles.formControl)}>\n                                <div>\n                                    <label htmlFor=\"name\" className={classname(styles.formLable)}>Modifier</label>\n                                </div>\n                                <div>\n                                    <Field\n                                        name=\"name\"\n                                        type=\"text\"\n                                        className={classname(styles.formInput)}\n                                    />\n                                </div>\n                                <ErrorMessage\n                                    name={\"name\"}\n                                    component=\"div\"\n                                    className=\"field-error\"\n                                />\n                            </div>\n                            <div>\n                                <div>\n                                    <h4>\n                                        Options\n                                    </h4>\n                                </div>\n                                <FieldArray name=\"options\">\n                                    {({ insert, remove, push, form }) => (\n                                        <div>\n                                            {values.options.length > 0 &&\n                                                values.options.map((option, index) => (\n                                                    <div className={classname(styles.horizontalContent)} key={index}>\n                                                        <div className={classname(styles.formControl)}>\n                                                            <div>\n                                                                <label className={classname(styles.formLable)} htmlFor={`options.${index}.name`}>Name</label>\n                                                            </div>\n                                                            <div>\n                                                                <Field\n                                                                    name={`options.${index}.name`}\n                                                                    type=\"text\"\n                                                                    className={classname(styles.formInput)}\n                                                                />\n                                                            </div>\n                                                            <ErrorMessage\n                                                                name={`options.${index}.name`}\n                                                                component=\"div\"\n                                                                className=\"field-error\"\n                                                            />\n                                                        </div>\n                                                        <div className={classname(styles.formControl)}>\n                                                            <div>\n                                                                <label className={classname(styles.formLable)} htmlFor={`options.${index}.price`}>Price</label>\n                                                            </div>\n                                                            <div>\n                                                                <Field\n                                                                    name={`options.${index}.price`}\n                                                                    type=\"number\"\n                                                                    step=\"0.01\"\n                                                                    className={classname(styles.formInput)}\n                                                                />\n                                                            </div>\n                                                            <ErrorMessage\n                                                                name={`options.${index}.price`}\n                                                                component=\"div\"\n                                                                className=\"field-error\"\n                                                            />\n                                                        </div>\n                                                        <div className={classname(styles.button_container)}>\n                                                            {index === 0 ? null :\n                                                                <div>\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        className=\"secondary\"\n                                                                        onClick={() => remove(index)}\n                                                                        className={classname(styles.common_button)}\n                                                                    >\n                                                                        <img src=\"/assets/remove.svg\" height=\"20px\" width=\"20px\"/>\n                                                                    </button>\n                                                                </div>\n                                                            }\n                                                            {\n                                                                index !== 0 ? null :\n                                                                    <div className={classname(styles.buttonContainer)}>\n                                                                        <button\n                                                                            type=\"button\"\n                                                                            className=\"secondary\"\n                                                                            onClick={() => insert(0, { name: '', price: '' })}\n                                                                            className={classname(styles.common_button)}\n                                                                        >\n                                                                            <img src=\"/assets/plus.svg\" height=\"20px\" width=\"20px\" />\n                                                                        </button>\n                                                                    </div>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                </FieldArray>\n                            </div>\n                        </div>\n                        <div className={classname(styles.saveButtonContainer)}>\n                            <button type=\"submit\" className={classname(styles.ctaButton)}>Save Option</button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Options/index.js",["137"],"import React from 'react'\nimport classname from 'classnames';\nimport styles from './Options.module.sass'\nimport isValid from 'utils/isValidImage';\nimport {useHistory} from 'react-router-dom'\nexport default function Options (){\n    const history = useHistory()\n    return (\n        <div>\n            <div className={classname(styles.home_top_bar)}>\n                <button onClick={() => history.push('/addOption')} className={classname(styles.home_button)}>\n                    Add Option\n                </button>\n            </div>\n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Modifiers/index.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modules/options/constants.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Groups/index.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/views/Items/addItem.js",["138","139","140","141","142"],"import React from 'react';\nimport classname from 'classnames';\nimport styles from './Items.module.sass'\nimport _ from 'lodash';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Groups from '../Groups/groups.json';\nimport Options from '../Options/options.json'\nimport { normalizeText as normalize } from 'utils/normalize'\nimport Select from 'react-select';\nimport Modal from 'react-modal'\nimport GroupModal from 'modals/Groups'\nimport OptionModal from 'modals/Options'\nimport Switch from 'react-switch'\nconst groupOptions = Groups.map(g => { return { label: normalize(g.name), value: g.name } })\nconst optionsForSelect = Options.map(g => { return { label: normalize(g.name), value: g.name } })\nconst initialValues = {\n    name: '',\n    description: '',\n    image_url: '',\n    price: '',\n    type: '',\n    stock: '',\n}\nconst validationSchema = yup.object({\n    name: yup.string().required('A valid option must have name'),\n    description: yup.string().optional(),\n    price: yup.number().required('A valid option must have price'),\n    type: yup.string().optional(),\n    stock: yup.number().optional(),\n})\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        transform: 'translate(-50%, -50%)',\n        width: '400px'\n    }\n};\n\nexport default function AddOption(props) {\n    const [groups, setGroups] = React.useState([]);\n    const [options, setOptions] = React.useState([]);\n    const [nowGroup, setNowGroup] = React.useState();\n    const [nowOption, setNowOption] = React.useState();\n    const [open, setOpen] = React.useState(false)\n    const [optionOpen, setOptionOpen] = React.useState(false)\n    const [active, setActive] = React.useState(true)\n    function showSingleOption(option) {\n        let validOptions = Options.map(o => o.name);\n        if (validOptions.indexOf(option) > -1) {\n            return (\n                <div className={classname(styles.right_bar_button)} onClick={() => { setNowOption(option); setOptionOpen(true) }}>\n                    <div>\n                        {option}\n                    </div>\n                    <div>\n                        <img src=\"/assets/info.svg\" height=\"18px\" width=\"18px\" />\n                    </div>\n                </div>\n            )\n        }\n    }\n    function ShowSingleGroup(group) {\n        if (!group) return null;\n        const names = Groups.map(g => g.name)\n        if (names.indexOf(group) > -1) {\n            let optionsToShow = _.filter(Groups, { name: group }).options\n            return (\n                <div className={classname(styles.right_bar_button)} onClick={() => { setNowGroup(group); setOpen(true) }}>\n                    <div>\n                        {group}\n                    </div>\n                    <div>\n                        <img src=\"/assets/info.svg\" height=\"18px\" width=\"18px\" />\n                    </div>\n                </div>\n            )\n        }\n        else return null\n    }\n    return (\n        <div className={classname(styles.container)}>\n            <div>\n                <div className={classname(styles.formTitle)}>\n                    <h4>\n                        Add Item\n                </h4>\n                </div>\n                <Formik\n                    initialValues={initialValues}\n                    onSubmit={async (values) => {\n                        await new Promise((r) => setTimeout(r, 500));\n                        let item = _.assign({}, values, {options_groups: groups, active, options})\n                        alert(JSON.stringify(item, null, 2));\n                    }}\n                >\n                    {({ values }) => (\n                        <Form>\n                            <div>\n                                <div className={classname(styles.formControl)}>\n                                    <div className={classname(styles.labelContainer)}>\n                                        <label htmlFor=\"name\" className={classname(styles.formLabel, styles.labelContainer)}>Item</label>\n                                    </div>\n                                    <div>\n                                        <Field\n                                            name=\"name\"\n                                            type=\"text\"\n                                            className={classname(styles.formInput)}\n                                            autoFocus={true}\n                                        />\n                                    </div>\n                                    <ErrorMessage\n                                        name={\"name\"}\n                                        component=\"div\"\n                                        className=\"field-error\"\n                                    />\n                                </div>\n                                <div className={classname(styles.formControl)}>\n                                    <div className={classname(styles.labelContainer)}>\n                                        <label htmlFor=\"price\" className={classname(styles.formLabel, styles.labelContainer)}>Price</label>\n                                    </div>\n                                    <div>\n                                        <Field\n                                            name=\"price\"\n                                            type=\"number\"\n                                            className={classname(styles.formInput)}\n                                            min={0}\n                                            step={0.01}\n                                        />\n                                    </div>\n                                    <ErrorMessage\n                                        name={\"price\"}\n                                        component=\"div\"\n                                        className=\"field-error\"\n                                    />\n                                </div>\n                                <div className={classname(styles.formControl)}>\n                                    <div className={classname(styles.labelContainer)}>\n                                        <label htmlFor=\"type\" className={classname(styles.formLabel, styles.labelContainer)}>Type</label>\n                                    </div>\n                                    <div>\n                                        <Field\n                                            name=\"type\"\n                                            type=\"text\"\n                                            className={classname(styles.formInput)}\n                                        />\n                                    </div>\n                                    <ErrorMessage\n                                        name={\"type\"}\n                                        component=\"div\"\n                                        className=\"field-error\"\n                                    />\n                                </div>\n                                <div className={classname(styles.formControl)}>\n                                    <div className={classname(styles.labelContainer)}>\n                                        <label htmlFor=\"active\" className={classname(styles.formLabel, styles.labelContainer)}>Active</label>\n                                    </div>\n                                    <div>\n                                        <Field\n                                            name=\"active\"\n                                        >\n                                          {({field, form, meta}) => (\n                                              <Switch name=\"active\" {...field}\n                                              onChange={e => {\n                                                  setActive(e)\n                                              }}\n                                              checked={active}/>\n                                          )}  \n                                        </Field>\n                                    </div>\n                                    <ErrorMessage\n                                        name={\"type\"}\n                                        component=\"div\"\n                                        className=\"field-error\"\n                                    />\n                                </div>\n                                <div className={classname(styles.imageField, styles.formControl)}>\n                                    <div className={classname(styles.labelContainer)}>\n                                        <label htmlFor=\"modifier_image\" className={classname(styles.formLabel, styles.labelContainer)}>\n                                            Image\n                            </label>\n                                    </div>\n                                    <div>\n                                        <input type=\"file\" name=\"modifier_image\" max={1} className={classname(styles.formInput)} />\n                                    </div>\n                                </div>\n                                <div className={classname(styles.titleWithNoBox)}>\n                                    <h4>Description</h4>\n                                </div>\n                                <div className={classname(styles.formControl)}>\n                                    <div>\n                                        <Field\n                                            as=\"textarea\"\n                                            name=\"description\"\n                                            type=\"text\"\n                                            className={classname(styles.descriptionContainer)}\n                                        />\n                                    </div>\n                                    <ErrorMessage\n                                        name={\"name\"}\n                                        component=\"div\"\n                                        className=\"field-error\"\n                                    />\n                                </div>\n\n                                <div className={classname(styles.multiSelectWidth)}>\n                                    <h6 className={classname(styles.titleWithNoBox)}>\n                                        Select Groups\n                            </h6>\n                                    <div role=\"group\" className={classname(styles.checkboxContainer)}>\n                                        <Select name=\"options_groups\" options={groupOptions} isMulti onChange={\n                                            e => {\n                                                setGroups(e.map(i => i.value))\n                                            }\n                                        }\n                                        />\n                                    </div>\n                                </div>\n                                <div className={classname(styles.multiSelectWidth)}>\n                                    <h6 className={classname(styles.titleWithNoBox)}>\n                                        Select Options\n                            </h6>\n                                    <div role=\"group\" className={classname(styles.checkboxContainer)}>\n                                        <Select name=\"options_groups\" options={optionsForSelect} isMulti onChange={\n                                            e => {\n                                                setOptions(e.map(i => i.value))\n                                            }\n                                        } />\n                                    </div>\n                                </div>\n                                <div className={classname(styles.saveButtonContainer)}>\n                                    <button type=\"submit\" className={classname(styles.ctaButton)}>Save Option</button>\n                                </div>\n                            </div>\n                        </Form>\n                    )\n                    }\n                </Formik >\n            </div>\n            <div className={classname(styles.right_bar)}>\n                <div className={classname(styles.right_bar_content)}>\n                    <div className={classname(styles.titleWithNoBox)}>\n                        <h4>Selected Groups</h4>\n                    </div>\n                    <div>\n                        {groups.length ?\n                            groups.map(g => (\n                                <div>\n                                    {ShowSingleGroup(g)}\n                                </div>\n                            ))\n                            :\n                            'Your selected groups are shown here '\n                        }\n                    </div>\n                </div>\n                <div className={classname(styles.right_bar_content)}>\n                    <div className={classname(styles.titleWithNoBox)}>\n                        <h4>Selectd Options</h4>\n                    </div>\n                    <div>\n                        {\n                            options.length ? options.map(option => (\n                                <div>\n                                    {showSingleOption(option)}\n                                </div>\n                            ))\n                                :\n                                'You selected options are shown here'\n                        }\n                    </div>\n                </div>\n            </div>\n            <Modal\n                isOpen={open}\n                onRequestClose={() => setOpen(false)}\n                style={customStyles}\n            >\n                <GroupModal group={nowGroup} />\n            </Modal>\n            <Modal\n                isOpen={optionOpen}\n                onRequestClose={() => setOptionOpen(false)}\n                style={customStyles}\n            >\n                <OptionModal option={nowOption} />\n            </Modal>\n        </div>\n    )\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/reducers.js",["143","144"],"import {combineReducers} from 'redux'\nimport optionReducer from 'modules/options/reducer';\n\nexport default function () {\n    return {\n        options: optionReducer\n    }\n}","/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modals/Groups/index.js",[],"/Users/manisharanga/dev/clients/upwork/echola/echola_menu_builder/src/modals/Options/index.js",["145","146","147"],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"148","replacedBy":"152"},{"ruleId":"150","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":17,"column":25,"nodeType":"156","endLine":17,"endColumn":102},{"ruleId":"157","severity":1,"message":"158","line":2,"column":25,"nodeType":"159","messageId":"160","endLine":2,"endColumn":33},{"ruleId":"157","severity":1,"message":"161","line":8,"column":12,"nodeType":"159","messageId":"160","endLine":8,"endColumn":21},{"ruleId":"157","severity":1,"message":"162","line":19,"column":7,"nodeType":"159","messageId":"160","endLine":19,"endColumn":21},{"ruleId":"163","severity":1,"message":"164","line":22,"column":1,"nodeType":"165","endLine":31,"endColumn":2},{"ruleId":"148","replacedBy":"166"},{"ruleId":"150","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":22,"column":9,"nodeType":"170","messageId":"171","endLine":23,"endColumn":75},{"ruleId":"163","severity":1,"message":"172","line":9,"column":1,"nodeType":"165","endLine":70,"endColumn":2},{"ruleId":"157","severity":1,"message":"173","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":9},{"ruleId":"157","severity":1,"message":"174","line":17,"column":7,"nodeType":"159","messageId":"160","endLine":17,"endColumn":23},{"ruleId":"157","severity":1,"message":"175","line":25,"column":11,"nodeType":"159","messageId":"160","endLine":25,"endColumn":23},{"ruleId":"157","severity":1,"message":"173","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":9},{"ruleId":"157","severity":1,"message":"174","line":19,"column":7,"nodeType":"159","messageId":"160","endLine":19,"endColumn":23},{"ruleId":"157","severity":1,"message":"176","line":9,"column":11,"nodeType":"159","messageId":"160","endLine":9,"endColumn":22},{"ruleId":"157","severity":1,"message":"161","line":14,"column":15,"nodeType":"159","messageId":"160","endLine":14,"endColumn":24},{"ruleId":"154","severity":1,"message":"155","line":30,"column":25,"nodeType":"156","endLine":30,"endColumn":91},{"ruleId":"157","severity":1,"message":"177","line":5,"column":13,"nodeType":"159","messageId":"160","endLine":5,"endColumn":16},{"ruleId":"157","severity":1,"message":"173","line":6,"column":8,"nodeType":"159","messageId":"160","endLine":6,"endColumn":9},{"ruleId":"178","severity":1,"message":"179","line":106,"column":73,"nodeType":"180","endLine":106,"endColumn":116},{"ruleId":"154","severity":1,"message":"155","line":108,"column":73,"nodeType":"156","endLine":108,"endColumn":131},{"ruleId":"178","severity":1,"message":"179","line":119,"column":77,"nodeType":"180","endLine":119,"endColumn":120},{"ruleId":"154","severity":1,"message":"155","line":121,"column":77,"nodeType":"156","endLine":121,"endColumn":134},{"ruleId":"157","severity":1,"message":"181","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":15},{"ruleId":"157","severity":1,"message":"174","line":25,"column":7,"nodeType":"159","messageId":"160","endLine":25,"endColumn":23},{"ruleId":"154","severity":1,"message":"155","line":60,"column":25,"nodeType":"156","endLine":60,"endColumn":82},{"ruleId":"157","severity":1,"message":"182","line":70,"column":17,"nodeType":"159","messageId":"160","endLine":70,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":77,"column":25,"nodeType":"156","endLine":77,"endColumn":82},{"ruleId":"157","severity":1,"message":"183","line":96,"column":29,"nodeType":"159","messageId":"160","endLine":96,"endColumn":33},{"ruleId":"157","severity":1,"message":"184","line":1,"column":9,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"172","line":4,"column":1,"nodeType":"165","endLine":8,"endColumn":2},{"ruleId":"157","severity":1,"message":"185","line":6,"column":38,"nodeType":"159","messageId":"160","endLine":6,"endColumn":51},{"ruleId":"157","severity":1,"message":"186","line":14,"column":9,"nodeType":"159","messageId":"160","endLine":14,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":25,"column":21,"nodeType":"156","endLine":25,"endColumn":88},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],["187"],["188"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'component' is assigned a value but never used.","'sagaMiddleware' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["187"],["188"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","Unexpected default export of anonymous function","'_' is defined but never used.","'validationSchema' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'currentPath' is assigned a value but never used.","'Yup' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'isValid' is defined but never used.","'optionsToShow' is assigned a value but never used.","'item' is assigned a value but never used.","'combineReducers' is defined but never used.","'normalizeText' is defined but never used.","'image_url' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]